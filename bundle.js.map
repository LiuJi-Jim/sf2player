{"version":3,"file":null,"sources":["../src/player/midi-event.js","../src/utils/index.js","../src/player/Mld.js","../src/riff.js","../src/player/smf-parser.js","../src/events.js","../src/player/mld.js","../src/player/smf-player.js","../src/player/index.js","../src/synth/note.js","../src/synth/sf2-parser.js","../src/synth/synth.js","../src/synth/sf2-loader.js","../src/synth/index.js","../src/index.js"],"sourcesContent":["class Event {\n  constructor(subtype, deltaTime, time) {\n    this.subtype = subtype\n    this.deltaTime = deltaTime\n    this.time = time\n  }\n}\n\nclass ChannelEvent extends Event {\n  constructor(subtype, deltaTime, time, channel, parameter1, parameter2) {\n    super(subtype, deltaTime, time)\n    this.channel = channel\n    this.parameter1 = parameter1\n    this.parameter2 = parameter2\n  }\n}\n\nclass SystemExclusiveEvent extends Event {\n  constructor(subtype, deltaTime, time, data) {\n    super(subtype, deltaTime, time)\n    this.data = data\n  }\n}\n\nclass MetaEvent extends Event {\n  constructor(subtype, deltaTime, time, data) {\n    super(subtype, deltaTime, time)\n    this.data = data\n  }\n}\n\nexport default {\n  Event,\n  ChannelEvent,\n  SystemExclusiveEvent,\n  MetaEvent\n}\n","export function noop() {}\n\nexport function hrtime() {\n  if (typeof window.performance !== 'undefined' && typeof performance.now !== 'undefined') {\n    // support hrt\n    return performance.now()\n  } else {\n    // oh no..\n    return (new Date()).getTime()\n  }\n}\n\nexport function range(val, min, max) {\n  if (val < min) {\n    return min\n  }\n  if (val > max) {\n    return max\n  }\n  return val\n}\n\nexport function extend(target, ...objs) {\n  for (let i = 0; i < objs.length; ++i) {\n    const obj = objs[i]\n    for (let key in obj) {\n      target[key] = obj[key]\n    }\n  }\n  return target\n}\n\nexport function stringToArray(str) {\n  const arr = new Array(str.length)\n  for (let i = 0; i < str.length; ++i) {\n    arr[i] = str.charCodeAt(i)\n  }\n  return arr\n}\n\nexport function readString(input, offset, length) {\n  const codes = input.subarray(offset, offset + length)\n  return String.fromCharCode(...codes)\n}\n\nexport function readUint32(input, offset, be = true) {\n   return be ? ((input[offset++] << 24) |\n                (input[offset++] << 16) |\n                (input[offset++] <<  8) |\n                (input[offset++])) >>> 0 :\n               ((input[offset++]) |\n                (input[offset++] <<  8) |\n                (input[offset++] << 16) |\n                (input[offset++] << 24)) >>> 0\n}\n\nexport function readInt16(input, offset, be = true) {\n  return be ? (input[offset++] << 8) | input[offset++] :\n              input[offset++] | (input[offset++] << 8)\n}\n","import {\n  extend,\n  stringToArray,\n  readString,\n  readUint32,\n  readInt16\n} from '../utils'\n\nclass Parser {\n  constructor(input, params) {\n    params = extend({\n      index: 0\n    }, params)\n    this.input = input\n    this.ip = params.index\n\n    this.header = null\n    this.dataInformation = null\n    this.tracks = null\n  }\n\n  parse() {\n    this.parseHeader()\n    this.parseDataInformation()\n    this.parseTracks()\n  }\n\n  parseHeader() {\n    const input = this.input\n    const header = {}\n    let ip = this.ip\n    const signature = readString(input, ip, 4)\n    ip += 4\n\n    if (signature !== 'melo') {\n      throw new Error(`invalid MFi signature: ${signature}`)\n    }\n\n    header.fileLength = readUint32(input, ip, true)\n    ip += 4\n    header.trackOffset = ((input[ip++] << 16) | input[ip++]) + ip\n    header.dataMajorType = input[ip++]\n    header.dataMinorType = input[ip++]\n    header.numberOfTracks = input[ip++]\n\n    this.header = header\n    this.ip = ip\n  }\n\n  parseDataInformation() {\n    const input = this.input\n    let ip = this.ip\n    const dataInformation = {}\n\n    while (ip < this.header.trackOffset) {\n      const type = readString(input, ip, 4)\n      ip += 4\n      const size = readInt16(input, ip, true)\n      ip += 2\n\n      switch(type) {\n      case 'titl': /* FALLTHROUGH */\n      case 'copy': /* FALLTHROUGH */\n      case 'vers': /* FALLTHROUGH */\n      case 'date': /* FALLTHROUGH */\n      case 'prot':\n        dataInformation[type] = readString(input, ip, size)\n        ip += size\n        break\n      case 'sorc':\n        dataInformation[type] = input[ip++]\n        break\n      case 'note':\n        dataInformation[type] = readInt16(input, ip, true)\n        ip += 2\n        break\n      case 'exst': /* FALLTHROUGH */\n      default:\n        dataInformation[type] = input.subarray(ip, ip += size)\n        break\n      }\n    }\n\n    this.dataInformation = dataInformation\n    this.ip = ip\n  }\n\n  parseTracks() {\n    const input = this.input\n    const tracks = []\n    let ip = this.ip\n\n    // 変換しにくい形式を平坦化する\n    for (let i = 0; i < this.header.numberOfTracks; ++i) {\n      const signature = readString(input, ip, 4)\n      ip += 4\n      if (signature !== 'trac') {\n        throw new Error(`invalid track signature: ${signature}`)\n      }\n\n      const size = readUint32(input, ip, true)\n      ip += 4\n\n      const limit = ip + size\n      const track = []\n      tracks.push(track)\n\n      while (ip < limit) {\n        const message = {}\n\n        // delta time\n        const deltaTime = input[ip++]\n        message.deltaTime = deltaTime\n\n        // status\n        let status = input[ip++]\n        if (status !== 0xff) {\n          message.type = 'note'\n          message.subType = 'Note'\n          message.voice = status >> 6\n          message.key = status && 0x3f\n\n          // note length\n          const noteLength = input[ip++]\n          message.length = noteLength\n\n          // extend status\n          if (this.dataInformation['note'] === 1) {\n            const extendStatus = input[ip++]\n            message.velocity = extendStatus >> 2\n            message.octaveShift = extendStatus & 0x3\n          }\n        } else {\n          message['type'] = 'meta'\n\n          // status\n          status = input[ip++]\n          switch (status >> 4) {\n            // system message\n            case 0xb:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'MasterVolume'\n                  message.value = input[ip++]\n                  break\n                case 0xa:\n                  message.subType = 'DrumScale'\n                  message.value = {\n                    'channel': (input[ip] >> 3) & 0x7,\n                    'drum': input[ip++] & 0x1\n                  }\n                  break\n                default:\n                  throw new Error(`unknown message type: ${status.toString(16)}`)\n              }\n              break\n            // tempo message\n            case 0xc:\n              message.subType = 'SetTempo'\n              message.value = {\n                'timeBase': (status & 0x7) === 7 ?\n                  NaN :\n                  Math.pow(2, status & 0x7) * ((status & 0x8) === 0 ? 6 : 15),\n                'tempo': input[ip++]\n              }\n              break\n            // control message\n            case 0xd:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'Point'\n                  message.value = input[ip++]\n                  break\n                case 0xd:\n                  message.subType = 'Loop'\n                  message.value = {\n                    'id': input[ip] >> 6,\n                    'count': input[ip] >> 2 & 0xf,\n                    'point': input[ip++] & 0x3\n                  }\n                  break\n                case 0xe:\n                  message.subType = 'Nop'\n                  message.value = input[ip++]\n                  break\n                case 0xf:\n                  message.subType = 'EndOfTrack'\n                  message.value = input[ip++]\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            // instrument\n            case 0xe:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'InstrumentLowPart'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'instrument': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x1:\n                  message.subType = 'InstrumentHighPart'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'instrument': input[ip++] & 0x1\n                  }\n                  break\n                case 0x2:\n                  message.subType = 'Volume'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'volume': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x3:\n                  message.subType = 'Valance'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'valance': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x4:\n                  message.subType = 'PitchBend'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x5:\n                  message.subType = 'ChannelAssign'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'channel': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x6:\n                  message.subType = 'VolumeChange'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'volume': (input[ip++] & 0x3f)  << 26 >> 26\n                  }\n                  break\n                case 0x7:\n                  message.subType = 'PitchBendRange'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                // TODO: 未遭遇\n                /*\n                case 0x8:\n                  message.subType = 'MasterFineTuning'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                */\n                // TODO: あってるか自信ない\n                case 0x9:\n                  message.subType = 'MasterCoarseTuning'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                case 0xA:\n                  message.subType = 'Modulation'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'depth': (input[ip++] & 0x3f)\n                  }\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            // extended information\n            case 0xf:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'EditInstrument'\n                  message.value = parseEditInstrument()\n                  break\n                case 0x1:\n                  message.subType = 'Vibrato'\n                  message.value = parseVibrato()\n                  break\n                case 0xf:\n                  message.subType = 'DeviceSpecific'\n                  message.value = parseDeviceSpecific()\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            default:\n              throw new Error(`unkwnon message type: ${status.toString(16)}`)\n          }\n        }\n\n        track.push(message)\n      }\n      ip = limit\n    }\n\n    function parseEditInstrument() {\n      const length = readInt16(input, ip, true)\n      ip += 2\n      const limit = ip + length\n      const result = []\n\n      if (input[ip++] !== 1) {\n        throw new Error(`invalid EditInstrument const value: ${input[ip - 1]}`)\n      }\n\n      while (ip < limit) {\n        const info = {}\n\n        info.part = (input[ip++] >> 4) & 0x3\n        info.modulator = {\n          'ML': input[ip] >> 5,\n          'VIV': (input[ip] >> 4) & 0x1,\n          'EG': (input[ip] >> 3) & 0x1,\n          'SUS': (input[ip] >> 2) & 0x1,\n          'RR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'DR': (input[ip] >> 4) & 0xf,\n          'AR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'SL': (input[ip] >> 4) & 0xf,\n          'TL': ((input[ip++] & 0x3) << 4) | (input[ip] >> 4),\n          'WF': (input[ip] >> 3) & 0x1,\n          'FB': input[ip++] & 0x7\n        }\n        info.carrier = {\n          'ML': input[ip] >> 5,\n          'VIV': (input[ip] >> 4) & 0x1,\n          'EG': (input[ip] >> 3) & 0x1,\n          'SUS': (input[ip] >> 2) & 0x1,\n          'RR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'DR': (input[ip] >> 4) & 0xf,\n          'AR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'SL': (input[ip] >> 4) & 0xf,\n          'TL': ((input[ip++] & 0x3) << 4) | (input[ip] >> 4),\n          'WF': (input[ip] >> 3) & 0x1,\n          'FB': input[ip++] & 0x7\n        }\n        info.octaveSelect = input[ip++] & 0x3\n\n        result.push(info)\n      }\n\n      return result\n    }\n\n    function parseVibrato() {\n      readInt16(input, ip, true)\n      ip += 2\n\n      if (input[ip++] !== 1) {\n        throw new Error(`invalid Vibrato const value: ${input[ip - 1]}`)\n      }\n\n      return {\n        'part': (input[ip++] >> 5) & 0x3,\n        'switch': (input[ip++] >> 6)\n      }\n    }\n\n    function parseDeviceSpecific() {\n      const length = readInt16(input, ip, true)\n      ip += 2\n      const limit = ip + length\n\n      if (input[ip++] !== 0x11) {\n        throw new Error(`invalid DeviceSpecific const value: ${input[ip - 1]}`)\n      }\n\n      return {\n        'data': input.subarray(ip, ip += limit - ip)\n      }\n    }\n\n    this.tracks = tracks\n    this.ip = ip\n  }\n\n  convertToMidiTracks() {\n    const tracks = []\n    const plainTracks = []\n    // const result = {\n    //   timeDivision: 48,\n    //   tracks,\n    //   plainTracks\n    // }\n    var mfiTracks = this.tracks\n    const channelTime = []\n\n    for (let i = 0; i < 16; ++i) {\n      plainTracks.push([])\n      channelTime.push(0)\n    }\n\n    // 変換しにくい形式を平坦化する\n    for (let i = 0; i < mfiTracks.length; ++i) {\n      const mfiTrack = mfiTracks[i]\n      const tmpTrack = []\n\n      // note の処理\n      for (let time = 0, pos = 0, j = 0; j < mfiTrack.length; ++j) {\n        let mfiEvent = mfiTrack[j]\n        time += mfiEvent['deltaTime']\n        mfiEvent.id = pos\n        mfiEvent.time = time\n\n        switch (mfiEvent.subType) {\n          case 'Nop':\n            break\n          case 'Note':\n            tmpTrack[pos++] = mfiEvent\n            // TODO: value: ... 形式になおす\n            tmpTrack[pos] = {\n              id: pos,\n              type: 'internal',\n              subType: 'NoteOff',\n              time: time + mfiEvent.length,\n              key: mfiEvent.key,\n              voice: mfiEvent.voice,\n              velocity: mfiEvent.velocity,\n              octaveShift: mfiEvent.octaveShift\n            }\n            pos++\n            break\n          case 'InstrumentHighPart':\n            const prevEvent = mfiEvent\n            mfiEvent = mfiTrack[++j]\n            if (mfiEvent.subType !== 'InstrumentLowPart') {\n              throw new Error('broken instrument')\n            }\n            // TODO: value: ... 形式になおす\n            tmpTrack[pos] = {\n              id: pos,\n              type: 'internal',\n              subType: 'ProgramChange',\n              time: time,\n              part: mfiEvent.value.part,\n              instrument: (prevEvent.value.instrument << 6) | mfiEvent.value.instrument\n            }\n            pos++\n            break\n          default:\n            tmpTrack[pos++] = mfiEvent\n            break\n        }\n      }\n      tmpTrack.sort((a, b) => {\n        return a.time > b.time ? 1 : a.time < b.time ? -1\n             : a.id   > b.id   ? 1 : a.id   < b.id   ? -1\n             : 0\n      })\n\n      // MIDI トラックに作成\n      tracks[i] = []\n      for (let time = 0, j = 0; j < tmpTrack.length; ++j) {\n        let mfiEvent = tmpTrack[j]\n        time = mfiEvent.time\n\n        let channel\n        let key\n        let tmp\n        switch (mfiEvent.subType) {\n          case 'Note':\n            // NoteOn: 9n kk vv\n            key = this.applyOctaveShift(mfiEvent.key + 45, mfiEvent.octaveShift)\n            channel = i * 4 + mfiEvent.voice\n\n            // TODO: リズムトラックの時は Key が -10 されているような気がする\n            if (channel === 9) {\n              key -= 10\n            }\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0x90 | channel,\n                key,\n                mfiEvent.velocity * 2\n              )\n            )\n            break\n          case 'NoteOff':\n            // NoteOff: 8n kk vv\n            key = this.applyOctaveShift(mfiEvent.key + 45, mfiEvent.octaveShift)\n            channel = i * 4 + mfiEvent.voice\n\n            // TODO: リズムトラックの時は Key が -10 されているような気がする\n            if (channel === 9) {\n              key -= 10\n            }\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0x80 | channel,\n                key,\n                mfiEvent.velocity * 2\n              )\n            )\n            break\n          case 'ProgramChange':\n            // Program Change: Cn pp\n            channel = i * 4 + mfiEvent.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xC0 | channel,\n                mfiEvent.instrument\n              )\n            )\n            break\n          case 'SetTempo':\n            // SetTempo: FF 51 03 tt tt tt\n            tmp = 2880000000 / (mfiEvent.value.tempo * mfiEvent.value.timeBase)\n            channel = 0 // SetTempo は必ず先頭のトラックに配置する\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xFF,\n                0x51,\n                0x03,\n                (tmp >> 16) & 0xff, (tmp >> 8) & 0xff, tmp & 0xff\n              )\n            )\n            break\n          case 'Loop':\n            // Marker: FF 06 ll ss ss ss ...\n            tmp = mfiEvent.value.count\n            const str = 'LOOP_'+\n              (mfiEvent.value.point === 0 ? 'START' : 'END') +\n              '=ID:' + mfiEvent.value.id +\n              ',COUNT:' + (tmp === 0 ? -1 : tmp)\n            channel = 0\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                [\n                  0xFF,\n                  0x06,\n                  str.length\n                ],\n                str.split('').map(function(a) {\n                  return a.charCodeAt(0)\n                })\n              )\n            )\n            break\n          case 'MasterVolume':\n            // Master Volume: F0 7F ee 04 01 dl dm F7\n            tmp = mfiEvent.value\n            channel = 0\n\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xF0,\n                0x07, // length\n                0x7F, 0x7F, 0x04, 0x01, tmp, tmp, 0xF7\n              )\n            )\n            break\n          case 'Modulation':\n            // CC#1 Modulation: Bn 01 dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x01,\n                mfiEvent.value.depth * 2\n              )\n            )\n            break\n          case 'Volume':\n            // CC#7 Volume: Bn 07 dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x07,\n                mfiEvent.value.volume * 2\n              )\n            )\n            break\n          case 'Valance':\n            // CC#10 Panpot: Bn 0A dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x0A,\n                (mfiEvent.value.valance - 32) * 2 + 64\n              )\n            )\n            break\n          case 'PitchBend':\n            // Pitch Bend: En dl dm\n            // TODO: LSB = MSB で良いか不明\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xE0 | channel,\n                mfiEvent.value.value * 2,\n                mfiEvent.value.value * 2\n              )\n            )\n            break\n          case 'PitchBendRange':\n            // Pitch Bend: CC#100=0 CC#101=0 CC#6\n            // Bn 64 00 Bn 65 00 Bn 06 vv\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x64, 0x00\n              ),\n              [\n                0x00,\n                0xB0 | channel,\n                0x65, 0x00\n              ],\n              [\n                0x00,\n                0xB0 | channel,\n                0x06, mfiEvent.value.value * 2\n              ]\n            )\n            break\n          case 'MasterCoarseTuning':\n            // MasterCoarseTuning: CC#100=0 CC#101=2 CC#6\n            // Bn 64 01 Bn 65 02 Bn 06 vv\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x64, 0x00\n              ),\n              [\n                0x00,\n                0xB0 | channel,\n                0x65, 0x02\n              ],\n              [\n                0x00,\n                0xB0 | channel,\n                0x06, mfiEvent.value.value * 2\n              ]\n            )\n            break\n          default:\n            continue\n        }\n\n        channelTime[channel] = mfiEvent.time\n      }\n    }\n\n    return this.toSMF(plainTracks)\n  }\n\n  applyOctaveShift(key, octaveShift) {\n    const table = [0, 12, -24, -12]\n\n    if (table[octaveShift] !== undefined) {\n      return key + table[octaveShift]\n    }\n\n    throw new Error(`invalid OctaveShift value: ${octaveShift}`)\n  }\n\n  toSMF(plainTracks) {\n    const TimeDivision = 48\n    let result = [\n      0x4D, 0x54, 0x68, 0x64, // \"MThd\"\n      0x00, 0x00, 0x00, 0x06, // Size\n      0x00, 0x01, // Format\n      0x00, 0x10, // number of track\n      (TimeDivision >> 8) & 0xff, TimeDivision & 0xff // Data\n    ]\n\n    if (this.dataInformation.copy !== undefined) {\n      let copy = stringToArray(this.dataInformation.copy)\n      copy = [0x00, 0xff, 0x02].concat(\n        this.deltaTimeToByteArray(copy.length),\n        copy\n      )\n      plainTracks[0].unshift(copy)\n    }\n\n    /*\n    if (this.dataInformation.titl !== void 0) {\n      let title = stringToArray(this.dataInformation.titl)\n      title = [0x00, 0xff, 0x03].concat(\n        this.deltaTimeToByteArray(title.length),\n        title\n      )\n      plainTracks[0].unshift(title)\n    }\n    */\n\n    for (let i = 0; i < plainTracks.length; ++i) {\n      const track = plainTracks[i]\n      const trackData = []\n      for (let j = 0; j < track.length; ++j) {\n        trackData.push(...track[j])\n      }\n\n      const jl = trackData.length\n      const trackHeader = [\n        0x4D, 0x54, 0x72, 0x6B, // \"MTrk\"\n        (jl >> 24) & 0xff, (jl >> 16) & 0xff,\n        (jl >>  8) & 0xff, (jl      ) & 0xff\n      ]\n      result = result.concat(trackHeader, trackData)\n    }\n\n    result = new Uint8Array(result)\n\n    return result\n  }\n\n  deltaTimeToByteArray(deltaTime) {\n    const array = []\n\n    while (deltaTime > 0x80) {\n      array.unshift(deltaTime & 0x7f | (array.length === 0 ? 0 : 0x80))\n      deltaTime >>>= 7\n    }\n    array.unshift(deltaTime | (array.length === 0 ? 0 : 0x80))\n\n    return array\n  }\n}\n\nexport default {\n  Parser\n}\n","import {\n  extend,\n  readString,\n  readUint32\n} from './utils'\n\nclass Chunk {\n  constructor(type, size, offset) {\n    this.type = type\n    this.size = size\n    this.offset = offset\n  }\n}\n\nclass Parser {\n  constructor(input, params) {\n    params = extend({\n      index: 0,\n      padding: true,\n      bigEndian: false\n    }, params)\n    this.input = input\n    this.ip = params.index\n    this.length = params.length || input.length - this.ip\n    this.offset = this.ip\n    this.padding = params.padding\n    this.bigEndian = params.bigEndian\n\n    this.chunkList = null\n  }\n\n  parse() {\n    const length = this.length + this.offset\n    this.chunkList = []\n    while (this.ip < length) {\n      this.parseChunk()\n    }\n  }\n\n  parseChunk() {\n    const input = this.input\n    let ip = this.ip\n    const signature = readString(input, ip, 4)\n    ip += 4\n    const size = readUint32(input, ip, this.bigEndian)\n    ip += 4\n\n    const chunk = new Chunk(\n      signature,\n      size,\n      ip\n    )\n    this.chunkList.push(chunk)\n    ip += size\n    if (this.padding && ((ip - this.offset) & 1) === 1) {\n      ip++\n    }\n    this.ip = ip\n  }\n\n  getChunk(index) {\n    const chunk = this.chunkList[index]\n    if (chunk === undefined) {\n      return null\n    }\n    return chunk\n  }\n\n  getNumberOfChunks() {\n    return this.chunkList.length\n  }\n}\n\nexport default {\n  Parser\n}\n","import Midi from './midi-event'\nimport Riff from '../riff'\nimport {\n  extend,\n  readString\n} from '../utils'\n\nclass SMFParser {\n  constructor(input, params) {\n    params = extend({\n      index: 0\n    }, params)\n    params.padding = false\n    params.bigEndian = true\n\n    this.input = input\n    this.ip = params.index\n    this.chunkIndex = 0\n\n    this.riffParser = new Riff.Parser(input, params)\n\n    this.formatType = null\n    this.numberOfTracks = null\n    this.timeDivision = null\n    this.tracks = []\n    this.plainTracks = []\n  }\n\n  parse() {\n    this.riffParser.parse()\n    this.parseHeaderChunk()\n\n    for (let i = 0; i < this.numberOfTracks; ++i) {\n      this.parseTrackChunk()\n    }\n  }\n\n  parseHeaderChunk() {\n    const chunk = this.riffParser.getChunk(this.chunkIndex++)\n\n    if (!chunk || chunk.type !== 'MThd') {\n      throw new Error('invalid header signature')\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    this.formatType     = (input[ip++] << 8) | input[ip++]\n    this.numberOfTracks = (input[ip++] << 8) | input[ip++]\n    this.timeDivision   = (input[ip++] << 8) | input[ip++]\n  }\n\n  parseTrackChunk() {\n    const chunk = this.riffParser.getChunk(this.chunkIndex++)\n\n    if (!chunk || chunk.type !== 'MTrk') {\n      throw new Error('invalid header signature')\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    const size = chunk.offset + chunk.size\n    const eventQueue = []\n    const plainQueue = []\n    let totalTime = 0\n    let prevEventType = -1\n    let prevChannel = -1\n\n    while (ip < size) {\n      // delta time\n      const deltaTime = readNumber()\n      totalTime += deltaTime\n\n      // offset\n      let offset = ip\n\n      // event type value, midi channel\n      let status = input[ip++]\n      let eventType = (status >> 4) & 0xf\n      let channel = status & 0xf\n\n      // run status rule\n      if (eventType < 8) {\n        eventType = prevEventType\n        channel = prevChannel\n        status = (prevEventType << 4) | prevChannel\n        ip--\n        offset--\n      } else {\n        prevEventType = eventType\n        prevChannel = channel\n      }\n\n      // TODO\n      const table = [\n        ,,,,,,,,\n        'NoteOff', 'NoteOn', 'NoteAftertouch', 'ControlChange',\n        'ProgramChange', 'ChannelAftertouch','PitchBend'\n      ]\n\n      let event\n      switch (eventType) {\n        // channel events\n        case 0x8: /* FALLTHROUGH */\n        case 0x9: /* FALLTHROUGH */\n        case 0xA: /* FALLTHROUGH */\n        case 0xB: /* FALLTHROUGH */\n        case 0xD: /* FALLTHROUGH */\n        case 0xE:\n          event = new Midi.ChannelEvent(\n            table[eventType], deltaTime, totalTime,\n            channel, input[ip++], input[ip++]\n          )\n          break\n        case 0xC:\n          event = new Midi.ChannelEvent(\n            table[eventType], deltaTime, totalTime,\n            channel, input[ip++]\n          )\n          break\n        // meta events, system exclusive event\n        case 0xF:\n          let tmp\n          switch (channel) {\n            // SysEx event\n            case 0x0:\n              tmp = readNumber()\n              if (input[ip + tmp - 1] !== 0xf7) {\n                throw new Error('invalid SysEx event')\n              }\n              event = new Midi.SystemExclusiveEvent(\n                'SystemExclusive', deltaTime, totalTime,\n                input.subarray(ip, (ip += tmp) - 1)\n              )\n              break\n            case 0x7:\n              tmp = readNumber()\n              event = new Midi.SystemExclusiveEvent(\n                'SystemExclusive(F7)', deltaTime, totalTime,\n                input.subarray(ip, (ip += tmp))\n              )\n              break\n            // meta event\n            case 0xF:\n              eventType = input[ip++]\n              tmp = readNumber()\n              switch (eventType) {\n                case 0x00: // sequence number\n                  event = new Midi.MetaEvent(\n                    'SequenceNumber', deltaTime, totalTime,\n                    [input[ip++], input[ip++]]\n                  )\n                  break\n                case 0x01: // text event\n                  event = new Midi.MetaEvent(\n                    'TextEvent', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x02: // copyright notice\n                  event = new Midi.MetaEvent(\n                    'CopyrightNotice', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x03: // sequence/track name\n                  event = new Midi.MetaEvent(\n                    'SequenceTrackName', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x04: // instrument name\n                  event = new Midi.MetaEvent(\n                    'InstrumentName', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x05: // lyrics\n                  event = new Midi.MetaEvent(\n                    'Lyrics', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x06: // marker\n                  event = new Midi.MetaEvent(\n                    'Marker', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x07: // cue point\n                  event = new Midi.MetaEvent(\n                    'CuePoint', deltaTime, totalTime,\n                    readString(input, ip, tmp)\n                  )\n                  ip += tmp\n                  break\n                case 0x20: // midi channel prefix\n                  event = new Midi.MetaEvent(\n                    'MidiChannelPrefix', deltaTime, totalTime,\n                    [input[ip++]]\n                  )\n                  break\n                case 0x2f: // end of track\n                  event = new Midi.MetaEvent(\n                    'EndOfTrack', deltaTime, totalTime,\n                    []\n                  )\n                  break\n                case 0x51: // set tempo\n                  event = new Midi.MetaEvent(\n                    'SetTempo', deltaTime, totalTime,\n                    [(input[ip++] << 16) | (input[ip++] << 8) | input[ip++]]\n                  )\n                  break\n                case 0x54: // smpte offset\n                  event = new Midi.MetaEvent(\n                    'SmpteOffset', deltaTime, totalTime,\n                    [input[ip++], input[ip++], input[ip++], input[ip++], input[ip++]]\n                  )\n                  break\n                case 0x58: // time signature\n                  event = new Midi.MetaEvent(\n                    'TimeSignature', deltaTime, totalTime,\n                    [input[ip++], input[ip++], input[ip++], input[ip++]]\n                  )\n                  break\n                case 0x59: // key signature\n                  event = new Midi.MetaEvent(\n                    'KeySignature', deltaTime, totalTime,\n                    [input[ip++], input[ip++]]\n                  )\n                  break\n                case 0x7f: // sequencer specific\n                  event = new Midi.MetaEvent(\n                    'SequencerSpecific', deltaTime, totalTime,\n                    [input.subarray(ip, ip += tmp)]\n                  )\n                  break\n                default: // unknown\n                  event = new Midi.MetaEvent(\n                    'Unknown', deltaTime, totalTime,\n                    [input.subarray(ip, ip += tmp)]\n                  )\n              }\n              break\n            default:\n              console.log(`unknown message: ${status.toString(16)}`)\n          }\n          break\n        // error\n        default:\n          throw new Error('invalid status')\n      }\n\n      // plain queue\n      const length = ip - offset\n      let plainBytes = input.subarray(offset, offset + length)\n      plainBytes[0] = status\n      if (\n        event instanceof Midi.ChannelEvent &&\n        event.subtype === 'NoteOn' &&\n        event.parameter2 === 0\n      ) {\n        event.subtype = table[8]\n        plainBytes = [0x80 | event.channel, event.parameter1, event.parameter2]\n        plainBytes = new Uint8Array(plainBytes)\n      }\n      plainQueue.push(plainBytes)\n\n      // event queue\n      eventQueue.push(event)\n    }\n\n    this.tracks.push(eventQueue)\n    this.plainTracks.push(plainQueue)\n\n    function readNumber() {\n      let result = 0\n      let tmp\n\n      do {\n        tmp = input[ip++]\n        result = (result << 7) | (tmp & 0x7f)\n      } while ((tmp & 0x80) !== 0)\n\n      return result\n    }\n  }\n}\n\nexport default SMFParser\n","class Event {\n  constructor(type, target, data) {\n    this.type = type\n    this.target = target\n    this.data = data\n  }\n}\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(event, handler) {\n    const arr = this._events[event] || (this._events[event] = [])\n    arr.push(handler)\n    return this\n  }\n  off(event, handler) {\n    const arr = this._events[event] || (this._events[event] = [])\n    for (;;) {\n      const index = arr.indexOf(handler)\n      if (index >= 0) {\n        arr.splice(index, 1)\n      } else {\n        break\n      }\n    }\n    return this\n  }\n  one(event, handler) {\n    const arr = this._events[event] || (this._events[event] = [])\n    const me = this\n    arr.push(function once(e) {\n      handler(e)\n      me.off(event, once)\n    })\n  }\n  emit(event, data) {\n    // console.log('emit', event, data.join(','))\n    this._emit(event, data, event)\n    if (event !== '*') {\n      this._emit('*', data, event)\n    }\n  }\n  _emit(event, data, realEvent) {\n    const e = new Event(realEvent, this, data)\n    const arr = this._events[event] || (this._events[event] = [])\n    for (let i = 0; i < arr.length; ++i) {\n      arr[i](e)\n    }\n  }\n}\n\nexport class Connectable extends EventEmitter {\n  constructor() {\n    super()\n    this.inputs = []\n    this.outputs = []\n    this._inputEvents = new EventEmitter()\n    this._outputEvents = new EventEmitter()\n\n    this.inputs.on = (event, handler) => {\n      this._inputEvents.on(event, handler)\n    }\n    this.outputs.on = (event, handler) => {\n      this._outputEvents.on(event, handler)\n    }\n    this.ready = new Promise(resolve => this.onready = resolve)\n  }\n  to(dest) {\n    dest.on('*', e => this._outputEvents.emit(e.type, e.data))\n    this.outputs.push(dest)\n  }\n  from(src) {\n    src.on('*', e => this._inputEvents.emit(e.type, e.data))\n    this.inputs.push(src)\n  }\n  static connect(from, to) {\n    from.to(to)\n    to.from(from)\n  }\n}\n","import {\n  extend,\n  stringToArray,\n  readString,\n  readUint32,\n  readInt16\n} from '../utils'\n\nclass Parser {\n  constructor(input, params) {\n    params = extend({\n      index: 0\n    }, params)\n    this.input = input\n    this.ip = params.index\n\n    this.header = null\n    this.dataInformation = null\n    this.tracks = null\n  }\n\n  parse() {\n    this.parseHeader()\n    this.parseDataInformation()\n    this.parseTracks()\n  }\n\n  parseHeader() {\n    const input = this.input\n    const header = {}\n    let ip = this.ip\n    const signature = readString(input, ip, 4)\n    ip += 4\n\n    if (signature !== 'melo') {\n      throw new Error(`invalid MFi signature: ${signature}`)\n    }\n\n    header.fileLength = readUint32(input, ip, true)\n    ip += 4\n    header.trackOffset = ((input[ip++] << 16) | input[ip++]) + ip\n    header.dataMajorType = input[ip++]\n    header.dataMinorType = input[ip++]\n    header.numberOfTracks = input[ip++]\n\n    this.header = header\n    this.ip = ip\n  }\n\n  parseDataInformation() {\n    const input = this.input\n    let ip = this.ip\n    const dataInformation = {}\n\n    while (ip < this.header.trackOffset) {\n      const type = readString(input, ip, 4)\n      ip += 4\n      const size = readInt16(input, ip, true)\n      ip += 2\n\n      switch(type) {\n      case 'titl': /* FALLTHROUGH */\n      case 'copy': /* FALLTHROUGH */\n      case 'vers': /* FALLTHROUGH */\n      case 'date': /* FALLTHROUGH */\n      case 'prot':\n        dataInformation[type] = readString(input, ip, size)\n        ip += size\n        break\n      case 'sorc':\n        dataInformation[type] = input[ip++]\n        break\n      case 'note':\n        dataInformation[type] = readInt16(input, ip, true)\n        ip += 2\n        break\n      case 'exst': /* FALLTHROUGH */\n      default:\n        dataInformation[type] = input.subarray(ip, ip += size)\n        break\n      }\n    }\n\n    this.dataInformation = dataInformation\n    this.ip = ip\n  }\n\n  parseTracks() {\n    const input = this.input\n    const tracks = []\n    let ip = this.ip\n\n    // 変換しにくい形式を平坦化する\n    for (let i = 0; i < this.header.numberOfTracks; ++i) {\n      const signature = readString(input, ip, 4)\n      ip += 4\n      if (signature !== 'trac') {\n        throw new Error(`invalid track signature: ${signature}`)\n      }\n\n      const size = readUint32(input, ip, true)\n      ip += 4\n\n      const limit = ip + size\n      const track = []\n      tracks.push(track)\n\n      while (ip < limit) {\n        const message = {}\n\n        // delta time\n        const deltaTime = input[ip++]\n        message.deltaTime = deltaTime\n\n        // status\n        let status = input[ip++]\n        if (status !== 0xff) {\n          message.type = 'note'\n          message.subType = 'Note'\n          message.voice = status >> 6\n          message.key = status && 0x3f\n\n          // note length\n          const noteLength = input[ip++]\n          message.length = noteLength\n\n          // extend status\n          if (this.dataInformation['note'] === 1) {\n            const extendStatus = input[ip++]\n            message.velocity = extendStatus >> 2\n            message.octaveShift = extendStatus & 0x3\n          }\n        } else {\n          message['type'] = 'meta'\n\n          // status\n          status = input[ip++]\n          switch (status >> 4) {\n            // system message\n            case 0xb:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'MasterVolume'\n                  message.value = input[ip++]\n                  break\n                case 0xa:\n                  message.subType = 'DrumScale'\n                  message.value = {\n                    'channel': (input[ip] >> 3) & 0x7,\n                    'drum': input[ip++] & 0x1\n                  }\n                  break\n                default:\n                  throw new Error(`unknown message type: ${status.toString(16)}`)\n              }\n              break\n            // tempo message\n            case 0xc:\n              message.subType = 'SetTempo'\n              message.value = {\n                'timeBase': (status & 0x7) === 7 ?\n                  NaN :\n                  Math.pow(2, status & 0x7) * ((status & 0x8) === 0 ? 6 : 15),\n                'tempo': input[ip++]\n              }\n              break\n            // control message\n            case 0xd:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'Point'\n                  message.value = input[ip++]\n                  break\n                case 0xd:\n                  message.subType = 'Loop'\n                  message.value = {\n                    'id': input[ip] >> 6,\n                    'count': input[ip] >> 2 & 0xf,\n                    'point': input[ip++] & 0x3\n                  }\n                  break\n                case 0xe:\n                  message.subType = 'Nop'\n                  message.value = input[ip++]\n                  break\n                case 0xf:\n                  message.subType = 'EndOfTrack'\n                  message.value = input[ip++]\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            // instrument\n            case 0xe:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'InstrumentLowPart'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'instrument': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x1:\n                  message.subType = 'InstrumentHighPart'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'instrument': input[ip++] & 0x1\n                  }\n                  break\n                case 0x2:\n                  message.subType = 'Volume'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'volume': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x3:\n                  message.subType = 'Valance'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'valance': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x4:\n                  message.subType = 'PitchBend'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x5:\n                  message.subType = 'ChannelAssign'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'channel': input[ip++] & 0x3f\n                  }\n                  break\n                case 0x6:\n                  message.subType = 'VolumeChange'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'volume': (input[ip++] & 0x3f)  << 26 >> 26\n                  }\n                  break\n                case 0x7:\n                  message.subType = 'PitchBendRange'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                // TODO: 未遭遇\n                /*\n                case 0x8:\n                  message.subType = 'MasterFineTuning'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                */\n                // TODO: あってるか自信ない\n                case 0x9:\n                  message.subType = 'MasterCoarseTuning'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'value': (input[ip++] & 0x3f)\n                  }\n                  break\n                case 0xA:\n                  message.subType = 'Modulation'\n                  message.value = {\n                    'part': input[ip] >> 6,\n                    'depth': (input[ip++] & 0x3f)\n                  }\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            // extended information\n            case 0xf:\n              switch (status & 0xf) {\n                case 0x0:\n                  message.subType = 'EditInstrument'\n                  message.value = parseEditInstrument()\n                  break\n                case 0x1:\n                  message.subType = 'Vibrato'\n                  message.value = parseVibrato()\n                  break\n                case 0xf:\n                  message.subType = 'DeviceSpecific'\n                  message.value = parseDeviceSpecific()\n                  break\n                default:\n                  throw new Error(`unkwnon message type: ${status.toString(16)}`)\n              }\n              break\n            default:\n              throw new Error(`unkwnon message type: ${status.toString(16)}`)\n          }\n        }\n\n        track.push(message)\n      }\n      ip = limit\n    }\n\n    function parseEditInstrument() {\n      const length = readInt16(input, ip, true)\n      ip += 2\n      const limit = ip + length\n      const result = []\n\n      if (input[ip++] !== 1) {\n        throw new Error(`invalid EditInstrument const value: ${input[ip - 1]}`)\n      }\n\n      while (ip < limit) {\n        const info = {}\n\n        info.part = (input[ip++] >> 4) & 0x3\n        info.modulator = {\n          'ML': input[ip] >> 5,\n          'VIV': (input[ip] >> 4) & 0x1,\n          'EG': (input[ip] >> 3) & 0x1,\n          'SUS': (input[ip] >> 2) & 0x1,\n          'RR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'DR': (input[ip] >> 4) & 0xf,\n          'AR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'SL': (input[ip] >> 4) & 0xf,\n          'TL': ((input[ip++] & 0x3) << 4) | (input[ip] >> 4),\n          'WF': (input[ip] >> 3) & 0x1,\n          'FB': input[ip++] & 0x7\n        }\n        info.carrier = {\n          'ML': input[ip] >> 5,\n          'VIV': (input[ip] >> 4) & 0x1,\n          'EG': (input[ip] >> 3) & 0x1,\n          'SUS': (input[ip] >> 2) & 0x1,\n          'RR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'DR': (input[ip] >> 4) & 0xf,\n          'AR': ((input[ip++] & 0x3) << 2) | (input[ip] >> 6),\n          'SL': (input[ip] >> 4) & 0xf,\n          'TL': ((input[ip++] & 0x3) << 4) | (input[ip] >> 4),\n          'WF': (input[ip] >> 3) & 0x1,\n          'FB': input[ip++] & 0x7\n        }\n        info.octaveSelect = input[ip++] & 0x3\n\n        result.push(info)\n      }\n\n      return result\n    }\n\n    function parseVibrato() {\n      readInt16(input, ip, true)\n      ip += 2\n\n      if (input[ip++] !== 1) {\n        throw new Error(`invalid Vibrato const value: ${input[ip - 1]}`)\n      }\n\n      return {\n        'part': (input[ip++] >> 5) & 0x3,\n        'switch': (input[ip++] >> 6)\n      }\n    }\n\n    function parseDeviceSpecific() {\n      const length = readInt16(input, ip, true)\n      ip += 2\n      const limit = ip + length\n\n      if (input[ip++] !== 0x11) {\n        throw new Error(`invalid DeviceSpecific const value: ${input[ip - 1]}`)\n      }\n\n      return {\n        'data': input.subarray(ip, ip += limit - ip)\n      }\n    }\n\n    this.tracks = tracks\n    this.ip = ip\n  }\n\n  convertToMidiTracks() {\n    const tracks = []\n    const plainTracks = []\n    // const result = {\n    //   timeDivision: 48,\n    //   tracks,\n    //   plainTracks\n    // }\n    var mfiTracks = this.tracks\n    const channelTime = []\n\n    for (let i = 0; i < 16; ++i) {\n      plainTracks.push([])\n      channelTime.push(0)\n    }\n\n    // 変換しにくい形式を平坦化する\n    for (let i = 0; i < mfiTracks.length; ++i) {\n      const mfiTrack = mfiTracks[i]\n      const tmpTrack = []\n\n      // note の処理\n      for (let time = 0, pos = 0, j = 0; j < mfiTrack.length; ++j) {\n        let mfiEvent = mfiTrack[j]\n        time += mfiEvent['deltaTime']\n        mfiEvent.id = pos\n        mfiEvent.time = time\n\n        switch (mfiEvent.subType) {\n          case 'Nop':\n            break\n          case 'Note':\n            tmpTrack[pos++] = mfiEvent\n            // TODO: value: ... 形式になおす\n            tmpTrack[pos] = {\n              id: pos,\n              type: 'internal',\n              subType: 'NoteOff',\n              time: time + mfiEvent.length,\n              key: mfiEvent.key,\n              voice: mfiEvent.voice,\n              velocity: mfiEvent.velocity,\n              octaveShift: mfiEvent.octaveShift\n            }\n            pos++\n            break\n          case 'InstrumentHighPart':\n            const prevEvent = mfiEvent\n            mfiEvent = mfiTrack[++j]\n            if (mfiEvent.subType !== 'InstrumentLowPart') {\n              throw new Error('broken instrument')\n            }\n            // TODO: value: ... 形式になおす\n            tmpTrack[pos] = {\n              id: pos,\n              type: 'internal',\n              subType: 'ProgramChange',\n              time: time,\n              part: mfiEvent.value.part,\n              instrument: (prevEvent.value.instrument << 6) | mfiEvent.value.instrument\n            }\n            pos++\n            break\n          default:\n            tmpTrack[pos++] = mfiEvent\n            break\n        }\n      }\n      tmpTrack.sort((a, b) => {\n        return a.time > b.time ? 1 : a.time < b.time ? -1\n             : a.id   > b.id   ? 1 : a.id   < b.id   ? -1\n             : 0\n      })\n\n      // MIDI トラックに作成\n      tracks[i] = []\n      for (let time = 0, j = 0; j < tmpTrack.length; ++j) {\n        let mfiEvent = tmpTrack[j]\n        time = mfiEvent.time\n\n        let channel\n        let key\n        let tmp\n        switch (mfiEvent.subType) {\n          case 'Note':\n            // NoteOn: 9n kk vv\n            key = this.applyOctaveShift(mfiEvent.key + 45, mfiEvent.octaveShift)\n            channel = i * 4 + mfiEvent.voice\n\n            // TODO: リズムトラックの時は Key が -10 されているような気がする\n            if (channel === 9) {\n              key -= 10\n            }\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0x90 | channel,\n                key,\n                mfiEvent.velocity * 2\n              )\n            )\n            break\n          case 'NoteOff':\n            // NoteOff: 8n kk vv\n            key = this.applyOctaveShift(mfiEvent.key + 45, mfiEvent.octaveShift)\n            channel = i * 4 + mfiEvent.voice\n\n            // TODO: リズムトラックの時は Key が -10 されているような気がする\n            if (channel === 9) {\n              key -= 10\n            }\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0x80 | channel,\n                key,\n                mfiEvent.velocity * 2\n              )\n            )\n            break\n          case 'ProgramChange':\n            // Program Change: Cn pp\n            channel = i * 4 + mfiEvent.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xC0 | channel,\n                mfiEvent.instrument\n              )\n            )\n            break\n          case 'SetTempo':\n            // SetTempo: FF 51 03 tt tt tt\n            tmp = 2880000000 / (mfiEvent.value.tempo * mfiEvent.value.timeBase)\n            channel = 0 // SetTempo は必ず先頭のトラックに配置する\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xFF,\n                0x51,\n                0x03,\n                (tmp >> 16) & 0xff, (tmp >> 8) & 0xff, tmp & 0xff\n              )\n            )\n            break\n          case 'Loop':\n            // Marker: FF 06 ll ss ss ss ...\n            tmp = mfiEvent.value.count\n            const str = 'LOOP_'+\n              (mfiEvent.value.point === 0 ? 'START' : 'END') +\n              '=ID:' + mfiEvent.value.id +\n              ',COUNT:' + (tmp === 0 ? -1 : tmp)\n            channel = 0\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                [\n                  0xFF,\n                  0x06,\n                  str.length\n                ],\n                str.split('').map(function(a) {\n                  return a.charCodeAt(0)\n                })\n              )\n            )\n            break\n          case 'MasterVolume':\n            // Master Volume: F0 7F ee 04 01 dl dm F7\n            tmp = mfiEvent.value\n            channel = 0\n\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xF0,\n                0x07, // length\n                0x7F, 0x7F, 0x04, 0x01, tmp, tmp, 0xF7\n              )\n            )\n            break\n          case 'Modulation':\n            // CC#1 Modulation: Bn 01 dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x01,\n                mfiEvent.value.depth * 2\n              )\n            )\n            break\n          case 'Volume':\n            // CC#7 Volume: Bn 07 dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x07,\n                mfiEvent.value.volume * 2\n              )\n            )\n            break\n          case 'Valance':\n            // CC#10 Panpot: Bn 0A dd\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x0A,\n                (mfiEvent.value.valance - 32) * 2 + 64\n              )\n            )\n            break\n          case 'PitchBend':\n            // Pitch Bend: En dl dm\n            // TODO: LSB = MSB で良いか不明\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xE0 | channel,\n                mfiEvent.value.value * 2,\n                mfiEvent.value.value * 2\n              )\n            )\n            break\n          case 'PitchBendRange':\n            // Pitch Bend: CC#100=0 CC#101=0 CC#6\n            // Bn 64 00 Bn 65 00 Bn 06 vv\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x64, 0x00\n              ),\n              [\n                0x00,\n                0xB0 | channel,\n                0x65, 0x00\n              ],\n              [\n                0x00,\n                0xB0 | channel,\n                0x06, mfiEvent.value.value * 2\n              ]\n            )\n            break\n          case 'MasterCoarseTuning':\n            // MasterCoarseTuning: CC#100=0 CC#101=2 CC#6\n            // Bn 64 01 Bn 65 02 Bn 06 vv\n            channel = i * 4 + mfiEvent.value.part\n            plainTracks[channel].push(\n              this.deltaTimeToByteArray(time - channelTime[channel]).concat(\n                0xB0 | channel,\n                0x64, 0x00\n              ),\n              [\n                0x00,\n                0xB0 | channel,\n                0x65, 0x02\n              ],\n              [\n                0x00,\n                0xB0 | channel,\n                0x06, mfiEvent.value.value * 2\n              ]\n            )\n            break\n          default:\n            continue\n        }\n\n        channelTime[channel] = mfiEvent.time\n      }\n    }\n\n    return this.toSMF(plainTracks)\n  }\n\n  applyOctaveShift(key, octaveShift) {\n    const table = [0, 12, -24, -12]\n\n    if (table[octaveShift] !== undefined) {\n      return key + table[octaveShift]\n    }\n\n    throw new Error(`invalid OctaveShift value: ${octaveShift}`)\n  }\n\n  toSMF(plainTracks) {\n    const TimeDivision = 48\n    let result = [\n      0x4D, 0x54, 0x68, 0x64, // \"MThd\"\n      0x00, 0x00, 0x00, 0x06, // Size\n      0x00, 0x01, // Format\n      0x00, 0x10, // number of track\n      (TimeDivision >> 8) & 0xff, TimeDivision & 0xff // Data\n    ]\n\n    if (this.dataInformation.copy !== undefined) {\n      let copy = stringToArray(this.dataInformation.copy)\n      copy = [0x00, 0xff, 0x02].concat(\n        this.deltaTimeToByteArray(copy.length),\n        copy\n      )\n      plainTracks[0].unshift(copy)\n    }\n\n    /*\n    if (this.dataInformation.titl !== void 0) {\n      let title = stringToArray(this.dataInformation.titl)\n      title = [0x00, 0xff, 0x03].concat(\n        this.deltaTimeToByteArray(title.length),\n        title\n      )\n      plainTracks[0].unshift(title)\n    }\n    */\n\n    for (let i = 0; i < plainTracks.length; ++i) {\n      const track = plainTracks[i]\n      const trackData = []\n      for (let j = 0; j < track.length; ++j) {\n        trackData.push(...track[j])\n      }\n\n      const jl = trackData.length\n      const trackHeader = [\n        0x4D, 0x54, 0x72, 0x6B, // \"MTrk\"\n        (jl >> 24) & 0xff, (jl >> 16) & 0xff,\n        (jl >>  8) & 0xff, (jl      ) & 0xff\n      ]\n      result = result.concat(trackHeader, trackData)\n    }\n\n    result = new Uint8Array(result)\n\n    return result\n  }\n\n  deltaTimeToByteArray(deltaTime) {\n    const array = []\n\n    while (deltaTime > 0x80) {\n      array.unshift(deltaTime & 0x7f | (array.length === 0 ? 0 : 0x80))\n      deltaTime >>>= 7\n    }\n    array.unshift(deltaTime | (array.length === 0 ? 0 : 0x80))\n\n    return array\n  }\n}\n\nexport default {\n  Parser\n}\n","import { Connectable } from '../events'\nimport Mld from './mld'\nimport SMFParser from './smf-parser'\nimport {\n  hrtime\n} from '../utils'\n\nconst DEFAULT_TEMPO = 500000\n\nclass SMFPlayer extends Connectable {\n  constructor() {\n    super()\n    this.tempo = DEFAULT_TEMPO\n    // this.webMidiLink = null\n    this.resume = null\n    this.pause = false\n    // this.ready = false\n    this.position = 0\n    this.track = null\n    this.timer = null\n    this.sequence = null\n    this.enableCC111Loop = false\n    this.enableFalcomLoop = false\n    this.enableMFiLoop = false\n    this.enableLoop = false\n    this.tempoRate = 1\n    this.masterVolume = 16383\n    this.sequenceName = null\n    this.copyright = null\n\n    // window.addEventListener('message', e => {\n    //   const params = e.data.split(',')\n    //   const event = params.shift()\n    //   this.emit(event, { params })\n    //   console.log('message', event, params)\n    //   // if (e.data === LINK_READY) {\n    //   //   this.sendInitMessage()\n    //   // }\n    // }, false)\n  }\n\n  stop() {\n    this.pause = true\n    this.resume = hrtime()\n\n    // if (this.webMidiLink) {\n    //   const win = this.webMidiLink.contentWindow\n    //   for (let i = 0; i < 16; ++i) {\n    //     win.postMessage(`midi,b${i.toString(16)},78,0`, '*')\n    //   }\n    // }\n\n    for (let i = 0; i < 16; ++i) {\n      this.emit('midi', [`b${i.toString(16)}`, '78', '0'])\n    }\n  }\n\n  init() {\n    this.stop()\n    this.initSequence()\n    this.pause = false\n    this.track = null\n    this.resume = -1\n    this.sequence = null\n    this.sequenceName = null\n    this.copyright = null\n    clearTimeout(this.timer)\n    this.onready()\n    this.ready.then(() => {\n      this.sendInitMessage()\n    })\n    // if (this.ready) {\n    //   this.sendInitMessage()\n    // } else {\n    //   this.outputs.on('link', e => {\n    //     if (e.data.params[0] === 'ready') {\n    //       this.sendInitMessage()\n    //     }\n    //   })\n    // }\n  }\n\n  initSequence() {\n    this.tempo = DEFAULT_TEMPO\n    this.position = 0\n  }\n\n  play() {\n    // if (!this.webMidiLink) {\n    //   throw new Error('WebMidiLink not found')\n    // }\n    this.ready.then(() => {\n      if (this.track instanceof Array && this.position >= this.track.length) {\n        this.position = 0\n      }\n      this.playSequence()\n    })\n    // if (this.ready) {\n    //   if (this.track instanceof Array && this.position >= this.track.length) {\n    //     this.position = 0\n    //   }\n    //   this.playSequence()\n    // } else {\n    //   // window.addEventListener('message', e => {\n    //   //   if (e.data === LINK_READY) {\n    //   //     this.ready = true\n    //   //     this.playSequence()\n    //   //   }\n    //   // }, false)\n    //   this.outputs.on('link', e => {\n    //     if (e.data[0] === 'ready') {\n    //       this.ready = true\n    //       this.playSequence()\n    //     }\n    //   })\n    // }\n  }\n\n  sendInitMessage() {\n    // const win = this.webMidiLink.contentWindow\n\n    for (let i = 0; i < 16; ++i) {\n      const hex = i.toString(16)\n      // // volume\n      // win.postMessage(`midi,b${hex},07,64`, '*')\n      // // panpot\n      // win.postMessage(`midi,b${hex},0a,40`, '*')\n      // // pitch bend\n      // win.postMessage(`midi,e${hex},00,40`, '*')\n      // // pitch bend range\n      // win.postMessage(`midi,b${hex},64,00`, '*')\n      // win.postMessage(`midi,b${hex},65,00`, '*')\n      // win.postMessage(`midi,b${hex},06,02`, '*')\n      // win.postMessage(`midi,b${hex},26,00`, '*')\n\n      // volume\n      this.emit('midi', [`b${hex}`, '07', '64'])\n      // panpot\n      this.emit('midi', [`b${hex}`, '0a', '40'])\n      // pitch bend\n      this.emit('midi', [`e${hex}`, '00', '40'])\n      // pitch bend range\n      this.emit('midi', [`b${hex}`, '64', '00'])\n      this.emit('midi', [`b${hex}`, '65', '00'])\n      this.emit('midi', [`b${hex}`, '06', '02'])\n      this.emit('midi', [`b${hex}`, '26', '00'])\n    }\n  }\n\n  // setWebMidiLink(url) {\n  //   if (this.webMidiLink) {\n  //     document.body.removeChild(this.webMidiLink)\n  //     this.webMidiLink = null\n  //   }\n\n  //   const iframe = document.createElement('iframe')\n  //   this.webMidiLink = iframe\n  //   iframe.src = url\n\n  //   document.body.appendChild(iframe)\n\n  //   this.on('link', e => {\n  //     if (e.data[0] === 'ready') {\n  //       this.ready = true\n  //       this.setMasterVolume(this.masterVolume)\n  //     }\n  //   })\n  // }\n\n  setMasterVolume(volume) {\n    volume = Math.floor(volume)\n    this.masterVolume = volume\n    // if (this.webMidiLink) {\n    //   this.webMidiLink.contentWindow.postMessage(\n    //     'midi,f0,7f,7f,04,01,' +\n    //     [\n    //       ('0' + ((volume     ) & 0x7f).toString(16)).substr(-2),\n    //       ('0' + ((volume >> 7) & 0x7f).toString(16)).substr(-2),\n    //       '7f'\n    //     ].join(','),\n    //     '*'\n    //   )\n    // }\n    const data = ['f0', '7f', '7f', '04', '01'].concat([\n      ('0' + ((volume     ) & 0x7f).toString(16)).substr(-2),\n      ('0' + ((volume >> 7) & 0x7f).toString(16)).substr(-2),\n      '7f'\n    ])\n    this.emit('midi', data)\n  }\n\n  playSequence() {\n    const timeDivision = this.sequence.timeDivision\n    const mergedTrack = this.track\n    // const webMidiLink = this.webMidiLink.contentWindow\n    const mark = []\n    let pos = this.position || 0\n\n    if (!this.pause) {\n      this.timer = setTimeout(\n        update,\n        this.tempo / 1000 * timeDivision * this.track[0].time\n      )\n    } else {\n      this.timer = setTimeout(\n        update,\n        this.resume\n      )\n      this.pause = false\n      this.resume = -1\n    }\n\n    const player = this\n\n    function update() {\n      const time = mergedTrack[pos].time\n      const length = mergedTrack.length\n      var procTime = hrtime()\n\n      if (player.pause) {\n        player.resume = hrtime() - player.resume\n        return\n      }\n\n      do {\n        const event = mergedTrack[pos].event\n\n        // set tempo\n        if (event.subtype === 'SetTempo') {\n          player.tempo = event.data[0]\n        }\n\n        // CC#111 Loop\n        if (event.subtype === 'ControlChange' && event.parameter1 === 111) {\n          mark[0] = { pos }\n        }\n\n        // Ys Eternal 2 Loop\n        if (event.subtype === 'Marker') {\n          // mark\n          if (event.data[0] === 'A') {\n            mark[0] = { pos }\n          }\n          // jump\n          if (event.data[0] === 'B' && player.enableFalcomLoop &&\n              mark[0] && typeof mark[0].pos === 'number') {\n            pos = mark[0].pos\n            player.timer = setTimeout(update, 0)\n            player.position = pos\n            return\n          }\n        }\n\n        // MFi Loop\n        if (event.subtype === 'Marker') {\n          // mark\n          const match = event.data[0].match(/^LOOP_(START|END)=ID:(\\d+),COUNT:(-?\\d+)$/)\n          if (match) {\n            if (match[1] === 'START') {\n              mark[match[2] | 0] = mark[match[2]] || {\n                'pos': pos,\n                'count': match[3] | 0\n              }\n            } else if (match[1] === 'END' && player.enableMFiLoop) {\n              const tmp = mark[match[2] | 0]\n              if (tmp['count'] !== 0) { // loop jump\n                if (tmp['count'] > 0) {\n                  tmp['count']--\n                }\n                pos = tmp['pos']\n                player.timer = setTimeout(update, 0)\n                player.position = pos\n                return\n              } else { // loop end\n                mark[match[2] | 0] = null\n              }\n            }\n          }\n        }\n\n        // send message\n        // webMidiLink.postMessage(mergedTrack[pos++].webMidiLink, '*')\n        player.emit('midi', mergedTrack[pos++].message)\n      } while (pos < length && mergedTrack[pos].time === time)\n\n      if (pos < length) {\n        procTime = hrtime() - procTime\n        player.timer = setTimeout(\n          update,\n          player.tempo / (1000 * timeDivision) * (mergedTrack[pos].time - time - procTime) * (1 / player.tempoRate)\n        )\n      } else {\n        // loop\n        if (player.enableCC111Loop && mark[0] && typeof mark[0].pos === 'number') {\n          pos = mark[0].pos\n          player.timer = setTimeout(update, 0)\n        } else if (player.enableLoop) {\n          player.initSequence()\n          player.playSequence()\n        }\n      }\n\n      player.position = pos\n    }\n  }\n\n  loadMidiFile(buffer) {\n    const parser = new SMFParser(buffer)\n\n    this.init()\n    parser.parse()\n\n    this.mergeMidiTracks(parser)\n  }\n\n  loadMldFile(buffer) {\n    const parser = new Mld.Parser(buffer)\n    this.init()\n    parser.parse()\n\n    this.loadMidiFile(parser.convertToMidiTracks())\n  }\n\n  mergeMidiTracks(midi) {\n    this.track = []\n    const mergedTrack = this.track\n    this.copyright = []\n    const tracks = midi.tracks\n    const trackPosition = new Array(tracks.length)\n    const plainTracks = midi.plainTracks\n\n    // initialize\n    for (let i = 0; i < tracks.length; ++i) {\n      trackPosition[i] = 0\n    }\n\n    // merge\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i]\n      for (let j = 0; j < track.length; ++j) {\n        if (midi.formatType === 0 && track[j].subtype === 'SequenceTrackName') {\n          this.sequenceName = track[j].data[0]\n        }\n\n        if (track[j].subtype === 'CopyrightNotice') {\n          this.copyright.push(track[j].data[0])\n        }\n\n        mergedTrack.push({\n          track: i,\n          eventId: j,\n          time: track[j].time,\n          event: track[j],\n          // webMidiLink: 'midi,' + Array.prototype.map.call(plainTracks[i][j], a => a.toString(16)).join(',')\n          message: Array.prototype.map.call(plainTracks[i][j], a => a.toString(16))\n        })\n      }\n    }\n\n    mergedTrack.sort((a, b) => {\n      return a['time']    > b['time']    ? 1 : a['time']    < b['time']    ? -1\n           : a['track']   > b['track']   ? 1 : a['track']   < b['track']   ? -1\n           : a['eventId'] > b['eventId'] ? 1 : a['eventId'] < b['eventId'] ? -1\n           : 0\n    })\n\n    this.sequence = midi\n  }\n}\n\nexport default SMFPlayer\n","import Midi from './midi-event'\nimport Mld from './Mld'\nimport Parser from './smf-parser'\nimport Player from './smf-player'\n\nexport default {\n  Midi,\n  Mld,\n  Parser,\n  Player\n}\n","import { range } from '../utils'\n\nfunction amountToFreq(val) {\n  return Math.pow(2, (val - 6900) / 1200) * 440\n}\n\nclass SynthesizerNote {\n  constructor(ctx, destination, instrument) {\n    this.ctx = ctx\n    this.destination = destination\n\n    this.instrument = instrument\n    this.channel = instrument.channel\n    this.key = instrument.key\n    this.velocity = instrument.velocity\n    this.buffer = instrument.sample\n    this.playbackRate = instrument.basePlaybackRate\n    this.sampleRate = instrument.sampleRate\n    this.volume = instrument.volume\n    this.panpot = instrument.panpot\n    this.pitchBend = instrument.pitchBend\n    this.pitchBendSensitivity = instrument.pitchBendSensitivity\n    this.modEnvToPitch = instrument.modEnvToPitch\n\n    // state\n    this.startTime = ctx.currentTime\n    this.computedPlaybackRate = this.playbackRate\n\n    // audio node\n    this.audioBuffer = null\n    this.bufferSource = null\n    this.panner = null\n    this.gainOutput = null\n  }\n\n  noteOn() {\n    const ctx = this.ctx\n    const instrument = this.instrument\n    let sample = this.buffer\n\n    const now = this.ctx.currentTime\n    const volAttack = now + instrument.volAttack\n    const modAttack = now + instrument.modAttack\n    const volDecay = volAttack + instrument.volDecay\n    const modDecay = modAttack + instrument.modDecay\n    const loopStart = instrument.loopStart / this.sampleRate\n    const loopEnd = instrument.loopEnd / this.sampleRate\n    const startTime = instrument.start / this.sampleRate\n\n    sample = sample.subarray(0, sample.length + instrument.end)\n    const buffer = this.audioBuffer = ctx.createBuffer(1, sample.length, this.sampleRate)\n    const channelData = buffer.getChannelData(0)\n    channelData.set(sample)\n\n    // buffer source\n    const bufferSource = this.bufferSource = ctx.createBufferSource()\n    bufferSource.buffer = buffer\n    bufferSource.loop = (this.channel !== 9)\n    bufferSource.loopStart = loopStart\n    bufferSource.loopEnd   = loopEnd\n    this.updatePitchBend(this.pitchBend)\n\n    // audio node\n    const panner = this.panner = ctx.createPanner()\n    const output = this.gainOutput = ctx.createGainNode()\n    const outputGain = output.gain\n\n    // filter\n    const filter = this.filter = ctx.createBiquadFilter()\n    filter.type = 'lowpass'\n\n    // panpot\n    panner.panningModel = 'equalpower' // HRTF\n    panner.setPosition(\n      Math.sin(this.panpot * Math.PI / 2),\n      0,\n      Math.cos(this.panpot * Math.PI / 2)\n    )\n\n    // Attack, Decay, Sustain\n    outputGain.setValueAtTime(0, now)\n    outputGain.linearRampToValueAtTime(this.volume * (this.velocity / 127), volAttack)\n    outputGain.linearRampToValueAtTime(this.volume * (1 - instrument.volSustain), volDecay)\n\n    // filter.Q.setValueAtTime(range(instrument.initialFilterQ * Math.pow(10, 200), filter.Q.minValue, filter.Q.maxValue), now)\n    // filter.Q.setValueAtTime(instrument.initialFilterQ * Math.pow(10, 200), now)\n    // const q = instrument.initialFilterQ\n    // filter.Q.setValueAtTime(range(q, filter.Q.minValue, filter.Q.maxValue), now)\n    const baseFreq = amountToFreq(instrument.initialFilterFc)\n    const peekFreq = amountToFreq(instrument.initialFilterFc + instrument.modEnvToFilterFc)\n    const sustainFreq = baseFreq + (peekFreq - baseFreq) * (1 - instrument.modSustain)\n    // console.log(baseFreq, peekFreq, sustainFreq, q)\n    const min = filter.frequency.minValue\n    const max = filter.frequency.maxValue\n    filter.frequency.setValueAtTime(range(baseFreq, min, max), now)\n    filter.frequency.linearRampToValueAtTime(range(peekFreq, min, max), modAttack)\n    filter.frequency.linearRampToValueAtTime(range(sustainFreq, min, max), modDecay)\n\n    // connect\n    bufferSource.connect(filter)\n    filter.connect(panner)\n    panner.connect(output)\n    output.connect(this.destination)\n\n    // fire\n    bufferSource.start(0, startTime)\n  }\n\n  noteOff() {\n    const instrument = this.instrument\n    const bufferSource = this.bufferSource\n    const output = this.gainOutput\n    const now = this.ctx.currentTime\n    const volEndTime = now + instrument.volRelease\n    const modEndTime = now + instrument.modRelease\n\n    if (!this.audioBuffer) {\n      return\n    }\n\n    // Release\n    output.gain.cancelScheduledValues(0)\n    output.gain.linearRampToValueAtTime(0, volEndTime)\n    bufferSource.playbackRate.cancelScheduledValues(0)\n    bufferSource.playbackRate.linearRampToValueAtTime(this.computedPlaybackRate, modEndTime)\n\n    bufferSource.loop = false\n    bufferSource.stop(volEndTime)\n\n    // disconnect\n    setTimeout(() => {\n        this.bufferSource.disconnect(0)\n        this.panner.disconnect(0)\n        this.gainOutput.disconnect(0)\n      },\n      instrument.volRelease * 1000\n    )\n  }\n\n  schedulePlaybackRate() {\n    const playbackRate = this.bufferSource.playbackRate\n    const computed = this.computedPlaybackRate\n    const start = this.startTime\n    const instrument = this.instrument\n    const modAttack = start + instrument.modAttack\n    const modDecay = modAttack + instrument.modDecay\n    const peekPitch = computed * Math.pow(\n      Math.pow(2, 1 / 12),\n      this.modEnvToPitch * instrument.scaleTuning\n    )\n    const endPitch = computed + (peekPitch - computed) * (1 - instrument.modSustain)\n\n    playbackRate.cancelScheduledValues(0)\n    playbackRate.setValueAtTime(computed, start)\n    playbackRate.linearRampToValueAtTime(peekPitch, modAttack)\n    playbackRate.linearRampToValueAtTime(endPitch, modDecay)\n    // playbackRate.linearRampToValueAtTime(computed + (peekPitch - computed) * (1 - instrument.modSustain), modDecay)\n  }\n\n  updatePitchBend(pitchBend) {\n    this.computedPlaybackRate = this.playbackRate * Math.pow(\n      Math.pow(2, 1 / 12),\n      (\n        this.pitchBendSensitivity * (\n          pitchBend / (pitchBend < 0 ? 8192 : 8191)\n        )\n      ) * this.instrument.scaleTuning\n    )\n\n    this.schedulePlaybackRate()\n  }\n}\n\nexport default SynthesizerNote\n","import Riff from '../riff'\nimport {\n  extend,\n  readString,\n  readUint32,\n  readInt16\n} from '../utils'\n\nclass Parser {\n  constructor(input, params) {\n    params = extend({}, params)\n    this.input = input\n    this.parserOption = params.parserOption\n\n    this.presetHeader = null\n    this.presetZone = null\n    this.presetZoneModulator = null\n    this.presetZoneGenerator = null\n    this.instrument = null\n    this.instrumentZone = null\n    this.instrumentZoneModulator = null\n    this.instrumentZoneGenerator = null\n    this.sampleHeader = null\n  }\n\n  parse() {\n    const parser = new Riff.Parser(this.input, this.parserOption)\n\n    // parse RIFF chunk\n    parser.parse()\n    if (parser.chunkList.length !== 1) {\n      throw new Error('wrong chunk length')\n    }\n\n    const chunk = parser.getChunk(0)\n    if (chunk === null) {\n      throw new Error('chunk not found')\n    }\n\n    this.parseRiffChunk(chunk)\n    // this.input = null\n  }\n\n  parseRiffChunk(chunk) {\n    // check parse target\n    if (chunk.type !== 'RIFF') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    // check signature\n    const signature = readString(input, ip, 4)\n    ip += 4\n    if (signature !== 'sfbk') {\n      throw new Error(`invalid signature: ${signature}`)\n    }\n\n    // read structure\n    const parser = new Riff.Parser(input, { index: ip, length: chunk.size - 4 })\n    parser.parse()\n    if (parser.getNumberOfChunks() !== 3) {\n      throw new Error('invalid sfbk structure')\n    }\n\n    // INFO-list\n    this.parseInfoList(parser.getChunk(0))\n    // sdta-list\n    this.parseSdtaList(parser.getChunk(1))\n    // pdta-list\n    this.parsePdtaList(parser.getChunk(2))\n  }\n\n  parseInfoList(chunk) {\n    // check parse target\n    if (chunk.type !== 'LIST') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    // check signature\n    const signature = readString(input, ip, 4)\n    ip += 4\n    if (signature !== 'INFO') {\n      throw new Error(`invalid signature: ${signature}`)\n    }\n\n    // read structure\n    const parser = new Riff.Parser(input, { index: ip, length: chunk.size - 4 })\n    parser.parse()\n  }\n\n  parseSdtaList(chunk) {\n    // check parse target\n    if (chunk.type !== 'LIST') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    // check signature\n    const signature = readString(input, ip, 4)\n    ip += 4\n    if (signature !== 'sdta') {\n      throw new Error(`invalid signature: ${signature}`)\n    }\n\n    // read structure\n    const parser = new Riff.Parser(input, { index: ip, length: chunk.size - 4 })\n    parser.parse()\n    if (parser.chunkList.length !== 1) {\n      throw new Error('TODO')\n    }\n    this.samplingData = parser.getChunk(0)\n  }\n\n  parsePdtaList(chunk) {\n    // check parse target\n    if (chunk.type !== 'LIST') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    let ip = chunk.offset\n\n    // check signature\n    const signature = readString(input, ip, 4)\n    ip += 4\n    if (signature !== 'pdta') {\n      throw new Error(`invalid signature: ${signature}`)\n    }\n\n    // read structure\n    const parser = new Riff.Parser(input, { index: ip, length: chunk.size - 4 })\n    parser.parse()\n\n    // check number of chunks\n    if (parser.getNumberOfChunks() !== 9) {\n      throw new Error('invalid pdta chunk')\n    }\n\n    this.parsePhdr(parser.getChunk(0))\n    this.parsePbag(parser.getChunk(1))\n    this.parsePmod(parser.getChunk(2))\n    this.parsePgen(parser.getChunk(3))\n    this.parseInst(parser.getChunk(4))\n    this.parseIbag(parser.getChunk(5))\n    this.parseImod(parser.getChunk(6))\n    this.parseIgen(parser.getChunk(7))\n    this.parseShdr(parser.getChunk(8))\n  }\n\n  parsePhdr(chunk) {\n    // check parse target\n    if (chunk.type !== 'phdr') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n\n    this.presetHeader = []\n\n    while (ip < size) {\n      this.presetHeader.push({\n        presetName: String.fromCharCode.apply(null, input.subarray(ip, ip += 20)),\n        preset: input[ip++] | (input[ip++] << 8),\n        bank: input[ip++] | (input[ip++] << 8),\n        presetBagIndex: input[ip++] | (input[ip++] << 8),\n        library: (input[ip++] | (input[ip++] << 8) | (input[ip++] << 16) | (input[ip++] << 24)) >>> 0,\n        genre: (input[ip++] | (input[ip++] << 8) | (input[ip++] << 16) | (input[ip++] << 24)) >>> 0,\n        morphology: (input[ip++] | (input[ip++] << 8) | (input[ip++] << 16) | (input[ip++] << 24)) >>> 0\n      })\n    }\n  }\n\n  parsePbag(chunk) {\n    // check parse target\n    if (chunk.type !== 'pbag') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n\n    this.presetZone = []\n\n    while (ip < size) {\n      this.presetZone.push({\n        presetGeneratorIndex: input[ip++] | (input[ip++] << 8),\n        presetModulatorIndex: input[ip++] | (input[ip++] << 8)\n      })\n    }\n  }\n\n  parsePmod(chunk) {\n    // check parse target\n    if (chunk.type !== 'pmod') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    this.presetZoneModulator = this.parseModulator(chunk)\n  }\n\n  parsePgen(chunk) {\n    // check parse target\n    if (chunk.type !== 'pgen') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    this.presetZoneGenerator = this.parseGenerator(chunk)\n  }\n\n  parseInst(chunk) {\n    // check parse target\n    if (chunk.type !== 'inst') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n\n    this.instrument = []\n\n    while (ip < size) {\n      this.instrument.push({\n        instrumentName: String.fromCharCode.apply(null, input.subarray(ip, ip += 20)),\n        instrumentBagIndex: input[ip++] | (input[ip++] << 8)\n      })\n    }\n  }\n\n  parseIbag(chunk) {\n    // check parse target\n    if (chunk.type !== 'ibag') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n\n    this.instrumentZone = []\n\n    while (ip < size) {\n      this.instrumentZone.push({\n        instrumentGeneratorIndex: input[ip++] | (input[ip++] << 8),\n        instrumentModulatorIndex: input[ip++] | (input[ip++] << 8)\n      })\n    }\n  }\n\n  parseImod(chunk) {\n    // check parse target\n    if (chunk.type !== 'imod') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    this.instrumentZoneModulator = this.parseModulator(chunk)\n  }\n\n  parseIgen(chunk) {\n    // check parse target\n    if (chunk.type !== 'igen') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    this.instrumentZoneGenerator = this.parseGenerator(chunk)\n  }\n\n  parseShdr(chunk) {\n    // check parse target\n    if (chunk.type !== 'shdr') {\n      throw new Error(`invalid chunk type: ${chunk.type}`)\n    }\n\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n\n    this.sampleHeader = []\n    const samples = this.sample = []\n\n    while (ip < size) {\n      const sampleName = readString(input, ip, 20)\n      ip += 20\n      const start = readUint32(input, ip, false)\n      ip += 4\n      const end = readUint32(input, ip, false)\n      ip += 4\n      let startLoop = readUint32(input, ip, false)\n      ip += 4\n      let endLoop = readUint32(input, ip, false)\n      ip += 4\n      let sampleRate = readUint32(input, ip, false)\n      ip += 4\n      const originalPitch = input[ip++]\n      const pitchCorrection = (input[ip++] << 24) >> 24\n      const sampleLink = readInt16(input, ip, false)\n      ip += 2\n      const sampleType = readInt16(input, ip, false)\n      ip += 2\n\n      let sample = new Int16Array(new Uint8Array(input.subarray(\n        this.samplingData.offset + start * 2,\n        this.samplingData.offset + end   * 2\n      )).buffer)\n\n      startLoop -= start\n      endLoop -= start\n\n      if (sampleRate > 0) {\n        const adjust = this.adjustSampleData(sample, sampleRate)\n        sample = adjust.sample\n        sampleRate *= adjust.multiply\n        startLoop *= adjust.multiply\n        endLoop *= adjust.multiply\n      }\n\n      samples.push(sample)\n\n      this.sampleHeader.push({\n        sampleName: sampleName,\n        /*\n        start: start,\n        end: end,\n        */\n        startLoop: startLoop,\n        endLoop: endLoop,\n        sampleRate: sampleRate,\n        originalPitch: originalPitch,\n        pitchCorrection: pitchCorrection,\n        sampleLink: sampleLink,\n        sampleType: sampleType\n      })\n    }\n  }\n\n  adjustSampleData(sample, sampleRate) {\n    let newSample\n    let multiply = 1\n    while (sampleRate < 22050) {\n      newSample = new Int16Array(sample.length * 2)\n      for (let i = 0, j = 0; i < sample.length; ++i) {\n        newSample[j++] = sample[i]\n        newSample[j++] = sample[i]\n      }\n      sample = newSample\n      multiply *= 2\n      sampleRate *= 2\n    }\n\n    return {\n      sample, multiply\n    }\n  }\n\n  parseModulator(chunk) {\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n    const output = []\n\n    while (ip < size) {\n      // Src Oper\n      // TODO\n      ip += 2\n\n      // Dest Oper\n      const code = readInt16(input, ip, false)\n      ip += 2\n      const key = GeneratorEnumeratorTable[code]\n      if (key === undefined) {\n        // Amount\n        output.push({\n          type: key,\n          value: {\n            code: code,\n            amount: input[ip] | (input[ip+1] << 8) << 16 >> 16,\n            lo: input[ip++],\n            hi: input[ip++]\n          }\n        })\n      } else {\n        // Amount\n        switch (key) {\n          case 'keyRange': /* FALLTHROUGH */\n          case 'velRange': /* FALLTHROUGH */\n          case 'keynum': /* FALLTHROUGH */\n          case 'velocity':\n            output.push({\n              type: key,\n              value: {\n                lo: input[ip++],\n                hi: input[ip++]\n              }\n            })\n            break\n          default:\n            output.push({\n              type: key,\n              value: {\n                amount: input[ip++] | (input[ip++] << 8) << 16 >> 16\n              }\n            })\n            break\n        }\n      }\n\n      // AmtSrcOper\n      // TODO\n      ip += 2\n\n      // Trans Oper\n      // TODO\n      ip += 2\n    }\n\n    return output\n  }\n\n  parseGenerator(chunk) {\n    const input = this.input\n    const size = chunk.offset + chunk.size\n    let ip = chunk.offset\n    const output = []\n\n    while (ip < size) {\n      const code = readInt16(input, ip, false)\n      ip += 2\n      const key = GeneratorEnumeratorTable[code]\n      if (key === void 0) {\n        output.push({\n          type: key,\n          value: {\n            code: code,\n            amount: input[ip] | (input[ip+1] << 8) << 16 >> 16,\n            lo: input[ip++],\n            hi: input[ip++]\n          }\n        })\n        continue\n      }\n\n      switch (key) {\n        case 'keynum': /* FALLTHROUGH */\n        case 'keyRange': /* FALLTHROUGH */\n        case 'velRange': /* FALLTHROUGH */\n        case 'velocity':\n          output.push({\n            type: key,\n            value: {\n              lo: input[ip++],\n              hi: input[ip++]\n            }\n          })\n          break\n        default:\n          output.push({\n            type: key,\n            value: {\n              amount: input[ip++] | (input[ip++] << 8) << 16 >> 16\n            }\n          })\n          break\n      }\n    }\n\n    return output\n  }\n\n  createInstrument() {\n    const instrument = this.instrument\n    const zone = this.instrumentZone\n    const output = []\n\n    // instrument -> instrument bag -> generator / modulator\n    for (let i = 0; i < instrument.length; ++i) {\n      const bagIndex    = instrument[i].instrumentBagIndex\n      const bagIndexEnd = instrument[i + 1] ? instrument[i + 1].instrumentBagIndex : zone.length\n      const zoneInfo = []\n\n      // instrument bag\n      for (let j = bagIndex; j < bagIndexEnd; ++j) {\n        const instrumentGenerator = this.createInstrumentGenerator(zone, j)\n        const instrumentModulator = this.createInstrumentModulator(zone, j)\n\n        zoneInfo.push({\n          generator: instrumentGenerator.generator,\n          generatorSequence: instrumentGenerator.generatorInfo,\n          modulator: instrumentModulator.modulator,\n          modulatorSequence: instrumentModulator.modulatorInfo\n        })\n      }\n\n      output.push({\n        name: instrument[i].instrumentName,\n        info: zoneInfo\n      })\n    }\n\n    return output\n  }\n\n  createPreset() {\n    const preset = this.presetHeader\n    const zone = this.presetZone\n    const output = []\n\n    // preset -> preset bag -> generator / modulator\n    for (let i = 0; i < preset.length; ++i) {\n      const bagIndex    = preset[i].presetBagIndex\n      const bagIndexEnd = preset[i + 1] ? preset[i + 1].presetBagIndex : zone.length\n      const zoneInfo = []\n      let instrument\n\n      // preset bag\n      for (let j = bagIndex; j < bagIndexEnd; ++j) {\n        const presetGenerator = this.createPresetGenerator(zone, j)\n        const presetModulator = this.createPresetModulator(zone, j)\n\n        zoneInfo.push({\n          generator: presetGenerator.generator,\n          generatorSequence: presetGenerator.generatorInfo,\n          modulator: presetModulator.modulator,\n          modulatorSequence: presetModulator.modulatorInfo\n        })\n\n        instrument =\n          presetGenerator.generator.instrument !== undefined ?\n            presetGenerator.generator.instrument.amount :\n          presetModulator.modulator.instrument !== undefined ?\n            presetModulator.modulator.instrument.amount :\n          null\n      }\n\n      output.push({\n        name: preset[i].presetName,\n        info: zoneInfo,\n        header: preset[i],\n        instrument: instrument\n      })\n    }\n\n    return output\n  }\n\n  createInstrumentGenerator(zone, index) {\n    const modgen = this.createBagModGen(\n      zone,\n      zone[index].instrumentGeneratorIndex,\n      zone[index + 1] ? zone[index + 1].instrumentGeneratorIndex : this.instrumentZoneGenerator.length,\n      this.instrumentZoneGenerator\n    )\n\n    return {\n      generator: modgen.modgen,\n      generatorInfo: modgen.modgenInfo\n    }\n  }\n\n  createInstrumentModulator(zone, index) {\n    const modgen = this.createBagModGen(\n      zone,\n      zone[index].presetModulatorIndex,\n      zone[index + 1] ? zone[index + 1].instrumentModulatorIndex: this.instrumentZoneModulator.length,\n      this.instrumentZoneModulator\n    )\n\n    return {\n      modulator: modgen.modgen,\n      modulatorInfo: modgen.modgenInfo\n    }\n  }\n\n  createPresetGenerator(zone, index) {\n    const modgen = this.createBagModGen(\n      zone,\n      zone[index].presetGeneratorIndex,\n      zone[index + 1] ? zone[index + 1].presetGeneratorIndex : this.presetZoneGenerator.length,\n      this.presetZoneGenerator\n    )\n\n    return {\n      generator: modgen.modgen,\n      generatorInfo: modgen.modgenInfo\n    }\n  }\n\n  createPresetModulator(zone, index) {\n    const modgen = this.createBagModGen(\n      zone,\n      zone[index].presetModulatorIndex,\n      zone[index + 1] ? zone[index + 1].presetModulatorIndex : this.presetZoneModulator.length,\n      this.presetZoneModulator\n    )\n\n    return {\n      modulator: modgen.modgen,\n      modulatorInfo: modgen.modgenInfo\n    }\n  }\n\n  createBagModGen(zone, indexStart, indexEnd, zoneModGen) {\n    const modgenInfo = []\n    const modgen = {\n      unknown: [],\n      keyRange: {\n        hi: 127,\n        lo: 0\n      }\n      // TODO\n    }\n    for (let i = indexStart; i < indexEnd; ++i) {\n      const info = zoneModGen[i]\n      modgenInfo.push(info)\n\n      if (info.type === 'unknown') {\n        modgen.unknown.push(info.value)\n      } else {\n        modgen[info.type] = info.value\n      }\n    }\n\n    return {\n      modgen, modgenInfo\n    }\n  }\n}\n\nconst GeneratorEnumeratorTable = [\n  'startAddrsOffset',\n  'endAddrsOffset',\n  'startloopAddrsOffset',\n  'endloopAddrsOffset',\n  'startAddrsCoarseOffset',\n  'modLfoToPitch',\n  'vibLfoToPitch',\n  'modEnvToPitch',\n  'initialFilterFc',\n  'initialFilterQ',\n  'modLfoToFilterFc',\n  'modEnvToFilterFc',\n  'endAddrsCoarseOffset',\n  'modLfoToVolume',\n  , // 14\n  'chorusEffectsSend',\n  'reverbEffectsSend',\n  'pan',\n  ,,, // 18,19,20\n  'delayModLFO',\n  'freqModLFO',\n  'delayVibLFO',\n  'freqVibLFO',\n  'delayModEnv',\n  'attackModEnv',\n  'holdModEnv',\n  'decayModEnv',\n  'sustainModEnv',\n  'releaseModEnv',\n  'keynumToModEnvHold',\n  'keynumToModEnvDecay',\n  'delayVolEnv',\n  'attackVolEnv',\n  'holdVolEnv',\n  'decayVolEnv',\n  'sustainVolEnv',\n  'releaseVolEnv',\n  'keynumToVolEnvHold',\n  'keynumToVolEnvDecay',\n  'instrument',\n  , // 42\n  'keyRange',\n  'velRange',\n  'startloopAddrsCoarseOffset',\n  'keynum',\n  'velocity',\n  'initialAttenuation',\n  , // 49\n  'endloopAddrsCoarseOffset',\n  'coarseTune',\n  'fineTune',\n  'sampleID',\n  'sampleModes',\n  , // 55\n  'scaleTuning',\n  'exclusiveClass',\n  'overridingRootKey'\n]\n\nexport default Parser\n\n","import { Connectable } from '../events'\nimport SynthesizerNote from './note'\nimport Parser from './sf2-parser'\n\nclass Synthesizer extends Connectable {\n  constructor(input) {\n    super()\n    this.input = input\n    this.parser = null\n    this.bank = 0\n    this.bankSet = null\n    this.bufferSize = 1024\n    this.RpnMsb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    this.RpnLsb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    this.ctx = this.getAudioContext()\n    this.gainMaster = this.ctx.createGainNode()\n    this.compressor = this.ctx.createDynamicsCompressor()\n    this.bufSrc = this.ctx.createBufferSource()\n    this.channelInstrument = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 11, 12, 13, 14, 15]\n    this.channelVolume = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    this.channelPanpot = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    this.channelPitchBend = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    this.channelPitchBendSensitivity = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    this.currentNoteOn = [\n      [], [], [], [], [], [], [], [],\n      [], [], [], [], [], [], [], []\n    ]\n    this.baseVolume = 1 / 0x8000\n    this.masterVolume = 16384\n\n    this.table = null\n\n    this.ready.then(() => {\n      this.inputs.on('midi', this.onmessage.bind(this))\n    })\n  }\n  onmessage(e) {\n    const type = e.type\n    const data = e.data\n\n    switch (type) {\n      case 'midi':\n        this.processMidiMessage(data.map(hex => parseInt(hex, 16)))\n        break\n      case 'link':\n        const command = data.shift()\n        switch (command) {\n          case 'reqpatch':\n            // TODO: dummy data\n            // const win = window.opener ? window.opener : window.parent\n            // win.postMessage('link,patch', '*')\n            this.emit('link', [ 'patch' ])\n            break\n          case 'setpatch':\n            // TODO: NOP\n            break\n          default:\n            console.error(`unknown link message: ${command}`)\n        }\n        break\n      default:\n        console.error(`unknown message type: ${type}`)\n    }\n  }\n\n  processMidiMessage(message) {\n    const channel = message[0] & 0x0f\n    const command = message[0] & 0xf0\n    // console.log('processMidiMessage', message, message.map(s => s.toString(16)).join(','), channel, command.toString(16))\n\n    switch (message[0] & 0xf0) {\n      case 0x80:\n        // NoteOff: 8n kk vv\n        this.noteOff(channel, message[1], message[2])\n        break\n      case 0x90:\n        // NoteOn: 9n kk vv\n        if (message[2] > 0) {\n          this.noteOn(channel, message[1], message[2])\n        } else {\n          this.noteOff(channel, message[1], 0)\n        }\n        break\n      case 0xB0:\n        // Control Change: Bn cc dd\n        switch (message[1]) {\n          case 0x06:\n            // Data Entry: Bn 06 dd\n            switch (this.RpnMsb[channel]) {\n              case 0:\n                switch (this.RpnLsb[channel]) {\n                  case 0:\n                    // Pitch Bend Sensitivity\n                    this.pitchBendSensitivity(channel, message[2])\n                    break\n                }\n                break\n            }\n            break\n          case 0x07:\n            // Volume Change: Bn 07 dd\n            this.volumeChange(channel, message[2])\n            break\n          case 0x0A:\n            // Panpot Change: Bn 0A dd\n            this.panpotChange(channel, message[2])\n            break\n          case 0x78:\n            // All Sound Off: Bn 78 00\n            this.allSoundOff(channel)\n            break\n          case 0x79:\n            // Reset All Control: Bn 79 00\n            this.resetAllControl(channel)\n            break\n          case 0x20:\n            // TODO: BankSelect\n            //console.log(\"bankselect:\", channel, message[2])\n            break\n          case 0x64:\n            // RPN MSB\n            this.RpnMsb[channel] = message[2]\n            break\n          case 0x65:\n            // RPN LSB\n            this.RpnLsb[channel] = message[2]\n            break\n          default:\n            // not supported\n        }\n        break\n      case 0xC0:\n        // Program Change: Cn pp\n        this.programChange(channel, message[1])\n        break\n      case 0xE0:\n        // Pitch Bend\n        this.pitchBend(channel, message[1], message[2])\n        break\n      case 0xf0:\n        // System Exclusive Message\n        // ID number\n        switch (message[1]) {\n          case 0x7e: // non-realtime\n            // TODO\n            break\n          case 0x7f: // realtime\n            // var device = message[2]\n            // sub ID 1\n            switch (message[3]) {\n              case 0x04: // device control\n                // sub ID 2\n                switch (message[4]) {\n                  case 0x01: // master volume\n                    this.setMasterVolume(message[5] + (message[6] << 7))\n                    break\n                }\n                break\n            }\n            break\n        }\n        break\n      default:\n        // not supported\n        break\n    }\n  }\n\n  getAudioContext() {\n    let ctx\n\n    if (window.AudioContext !== undefined) {\n      ctx = new AudioContext()\n    } else if (window.webkitAudioContext !== undefined) {\n      ctx = new webkitAudioContext()\n    } else if (window.mozAudioContext !== undefined) {\n      ctx = new mozAudioContext()\n    } else {\n      throw new Error('Web Audio not supported')\n    }\n\n    if (ctx.createGainNode === void 0) {\n      ctx.createGainNode = ctx.createGain\n    }\n\n    return ctx\n  }\n\n  init() {\n    this.parser = new Parser(this.input)\n    this.bankSet = this.createAllInstruments()\n\n    for (let i = 0; i < 16; ++i) {\n      this.programChange(i, i)\n      this.volumeChange(i, 0x64)\n      this.panpotChange(i, 0x40)\n      this.pitchBend(i, 0x00, 0x40) // 8192\n      this.pitchBendSensitivity(i, 2)\n    }\n  }\n\n  refreshInstruments(input) {\n    this.input = input\n    this.parser = new Parser(input)\n    this.bankSet = this.createAllInstruments()\n  }\n\n  createAllInstruments() {\n    const parser = this.parser\n    parser.parse()\n    const presets = parser.createPreset()\n    const instruments = parser.createInstrument()\n    const banks = []\n\n    for (let i = 0; i < presets.length; ++i) {\n      const preset = presets[i]\n      const presetNumber = preset.header.preset\n\n      if (typeof preset.instrument !== 'number') {\n        continue\n      }\n\n      const instrument = instruments[preset.instrument]\n      if (instrument.name.replace(/\\0*$/, '') === 'EOI') {\n        continue\n      }\n\n      // select bank\n      if (banks[preset.header.bank] === undefined) {\n        banks[preset.header.bank] = []\n      }\n      const bank = banks[preset.header.bank]\n      bank[presetNumber] = []\n      bank[presetNumber].name = preset.name\n\n      for (let j = 0; j < instrument.info.length; ++j) {\n        this.createNoteInfo(parser, instrument.info[j], bank[presetNumber])\n      }\n    }\n\n    return banks\n  }\n\n  createNoteInfo(parser, info, preset) {\n    const generator = info.generator\n\n    if (generator.keyRange === undefined || generator.sampleID === undefined) {\n      return\n    }\n\n    const volAttack  = this.getModGenAmount(generator, 'attackVolEnv',  -12000)\n    const volDecay   = this.getModGenAmount(generator, 'decayVolEnv',   -12000)\n    const volSustain = this.getModGenAmount(generator, 'sustainVolEnv')\n    const volRelease = this.getModGenAmount(generator, 'releaseVolEnv', -12000)\n    const modAttack  = this.getModGenAmount(generator, 'attackModEnv',  -12000)\n    const modDecay   = this.getModGenAmount(generator, 'decayModEnv',   -12000)\n    const modSustain = this.getModGenAmount(generator, 'sustainModEnv')\n    const modRelease = this.getModGenAmount(generator, 'releaseModEnv', -12000)\n\n    const tune = (\n      this.getModGenAmount(generator, 'coarseTune') +\n      this.getModGenAmount(generator, 'fineTune') / 100\n    )\n    const scale = this.getModGenAmount(generator, 'scaleTuning', 100) / 100\n    const freqVibLFO = this.getModGenAmount(generator, 'freqVibLFO')\n\n    for (let i = generator.keyRange.lo; i <= generator.keyRange.hi; ++i)  {\n      if (preset[i]) {\n        continue\n      }\n\n      const sampleId = this.getModGenAmount(generator, 'sampleID')\n      const sampleHeader = parser.sampleHeader[sampleId]\n      preset[i] = {\n        sample: parser.sample[sampleId],\n        sampleRate: sampleHeader.sampleRate,\n        basePlaybackRate: Math.pow(\n          Math.pow(2, 1/12),\n          (\n            i -\n            this.getModGenAmount(generator, 'overridingRootKey', sampleHeader.originalPitch) +\n            tune + (sampleHeader.pitchCorrection / 100)\n          ) * scale\n        ),\n        modEnvToPitch: this.getModGenAmount(generator, 'modEnvToPitch') / 100,\n        scaleTuning: scale,\n        start: this.getModGenAmount(generator, 'startAddrsCoarseOffset') * 32768 +\n          this.getModGenAmount(generator, 'startAddrsOffset'),\n        end: this.getModGenAmount(generator, 'endAddrsCoarseOffset') * 32768 +\n          this.getModGenAmount(generator, 'endAddrsOffset'),\n        loopStart: (\n          //(sampleHeader.startLoop - sampleHeader.start) +\n          (sampleHeader.startLoop) +\n            this.getModGenAmount(generator, 'startloopAddrsCoarseOffset') * 32768 +\n            this.getModGenAmount(generator, 'startloopAddrsOffset')\n          ),\n        loopEnd: (\n          //(sampleHeader.endLoop - sampleHeader.start) +\n          (sampleHeader.endLoop) +\n            this.getModGenAmount(generator, 'endloopAddrsCoarseOffset') * 32768 +\n            this.getModGenAmount(generator, 'endloopAddrsOffset')\n          ),\n        volAttack:  Math.pow(2, volAttack / 1200),\n        volDecay:   Math.pow(2, volDecay / 1200),\n        volSustain: volSustain / 1000,\n        volRelease: Math.pow(2, volRelease / 1200),\n        modAttack:  Math.pow(2, modAttack / 1200),\n        modDecay:   Math.pow(2, modDecay / 1200),\n        modSustain: modSustain / 1000,\n        modRelease: Math.pow(2, modRelease / 1200),\n        initialFilterFc: this.getModGenAmount(generator, 'initialFilterFc', 13500),\n        modEnvToFilterFc: this.getModGenAmount(generator, 'modEnvToFilterFc'),\n        initialFilterQ: this.getModGenAmount(generator, 'initialFilterQ'),\n        freqVibLFO: freqVibLFO ? Math.pow(2, freqVibLFO / 1200) * 8.176 : void 0\n      }\n    }\n  }\n\n  getModGenAmount(generator, enumeratorType, defaults = 0) {\n    return generator[enumeratorType] ? generator[enumeratorType].amount : defaults\n  }\n\n  start() {\n    this.bufSrc.connect(this.gainMaster)\n    this.gainMaster.connect(this.ctx.destination)\n    this.bufSrc.start(0)\n\n    this.setMasterVolume(16383)\n\n    this.onready()\n  }\n\n  setMasterVolume(volume) {\n    this.masterVolume = volume\n    this.gainMaster.gain.value = this.baseVolume * (volume / 16384)\n  }\n\n  stop() {\n    this.bufSrc.disconnect(0)\n    this.gainMaster.disconnect(0)\n    this.compressor.disconnect(0)\n  }\n\n  drawSynth() {\n    const table = this.table = document.createElement('table')\n    const head = document.createElement('thead')\n    const body = document.createElement('tbody')\n\n    head.appendChild(this.createTableLine(TableHeader, true))\n\n    for (let i = 0; i < 16; ++i) {\n      const tableLine = this.createTableLine(TableHeader.length + 128, false)\n      body.appendChild(tableLine)\n\n      if (i !== 9) {\n        var select = document.createElement('select')\n        var option\n        for (let j = 0; j < ProgramNames.length; ++j) {\n          option = document.createElement('option')\n          option.textContent = ProgramNames[j]\n          select.appendChild(option)\n        }\n        tableLine.querySelector('td:nth-child(1)').appendChild(select)\n        select.addEventListener('change', (channel => e => {\n          this.programChange(channel, e.target.selectedIndex)\n        })(i), false)\n        select.selectedIndex = this.channelInstrument[i]\n      } else {\n        tableLine.querySelector('td:first-child').textContent = '[ RHYTHM TRACK ]'\n      }\n\n      const notes = tableLine.querySelectorAll('td:nth-last-child(-n+128)')\n      for (let j = 0; j < ProgramNames.length; ++j) {\n        notes[j].addEventListener('mousedown', (channel => key => e => {\n          e.preventDefault()\n          this.drag = true\n          this.noteOn(channel, key, 127)\n        })(i, j), false)\n        notes[j].addEventListener('mouseover', (channel => key => e => {\n          e.preventDefault()\n          if (this.drag) {\n            this.noteOn(channel, key, 127)\n          }\n        })(i, j), false)\n        notes[j].addEventListener('mouseout', (channel => key => e => {\n          e.preventDefault()\n          this.noteOff(channel, key, 0)\n        })(i, j), false)\n        notes[j].addEventListener('mouseup', (channel => key => e => {\n          e.preventDefault()\n          this.drag = false\n          this.noteOff(channel, key, 0)\n        })(i, j), false)\n      }\n    }\n\n    table.appendChild(head)\n    table.appendChild(body)\n\n    return table\n  }\n\n  removeSynth() {\n    const table = this.table\n\n    if (table && table.parentNode) {\n      table.parentNode.removeChild(table)\n      this.table = null\n    }\n  }\n\n  createTableLine(array, isTitleLine) {\n    const tr = document.createElement('tr')\n    const isArray = array instanceof Array\n    const n = isArray ? array.length : array\n\n    for (let i = 0; i < n; ++i) {\n      const cell = document.createElement(isTitleLine ? 'th' : 'td')\n      cell.textContent = (isArray && array[i] !== undefined) ? array[i] : ''\n      tr.appendChild(cell)\n    }\n\n    return tr\n  }\n\n  noteOn(channel, key, velocity) {\n    const bank = this.bankSet[channel === 9 ? 128 : this.bank]\n    const instrument = bank[this.channelInstrument[channel]]\n\n    if (this.table) {\n      this.table.querySelector(\n        'tbody > ' +\n          `tr:nth-child(${channel + 1}) > ` +\n          `td:nth-child(${TableHeader.length + key + 1})`\n      ).classList.add('note-on')\n    }\n\n    if (!instrument) {\n      // TODO\n      console.warn(\n        'instrument not found: bank=%s instrument=%s channel=%s',\n        channel === 9 ? 128 : this.bank,\n        this.channelInstrument[channel],\n        channel\n      )\n      return\n    }\n\n    const instrumentKey = instrument[key]\n\n    if (!(instrumentKey)) {\n      // TODO\n      console.warn(\n        'instrument not found: bank=%s instrument=%s channel=%s key=%s',\n        channel === 9 ? 128 : this.bank,\n        this.channelInstrument[channel],\n        channel,\n        key\n      )\n      return\n    }\n\n    let panpot = this.channelPanpot[channel] - 64\n    panpot /= panpot < 0 ? 64 : 63\n\n    // create note information\n    instrumentKey['channel'] = channel\n    instrumentKey['key'] = key\n    instrumentKey['velocity'] = velocity\n    instrumentKey['panpot'] = panpot\n    instrumentKey['volume'] = this.channelVolume[channel] / 127\n    instrumentKey['pitchBend'] = this.channelPitchBend[channel] - 8192\n    instrumentKey['pitchBendSensitivity'] = this.channelPitchBendSensitivity[channel]\n\n    // note on\n    const note = new SynthesizerNote(this.ctx, this.gainMaster, instrumentKey)\n    note.noteOn()\n    this.currentNoteOn[channel].push(note)\n  }\n\n  noteOff(channel, key, velocity) {\n    const bank = this.bankSet[channel === 9 ? 128 : this.bank]\n    const instrument = bank[this.channelInstrument[channel]]\n    const currentNoteOn = this.currentNoteOn[channel]\n\n    if (this.table) {\n      this.table.querySelector(\n        'tbody > ' +\n        `tr:nth-child(${channel + 1}) > ` +\n        `td:nth-child(${TableHeader.length + key + 1})`\n      ).classList.remove('note-on')\n    }\n\n    if (!instrument) {\n      return\n    }\n\n    for (let i = 0; i < currentNoteOn.length; ++i) {\n      const note = currentNoteOn[i]\n      if (note.key === key) {\n        note.noteOff()\n        currentNoteOn.splice(i, 1)\n        --i\n      }\n    }\n  }\n\n  programChange(channel, instrument) {\n    if (channel === 9) {\n      return\n    }\n    if (this.table) {\n      this.table.querySelector(`tbody > tr:nth-child(${channel + 1}) > td:first-child > select`).selectedIndex = instrument\n    }\n    this.channelInstrument[channel] = instrument\n  }\n\n  volumeChange(channel, volume) {\n    if (this.table) {\n      this.table.querySelector(`tbody > tr:nth-child(${channel + 1}) > td:nth-child(2)`).textContent = volume\n    }\n\n    this.channelVolume[channel] = volume\n  }\n\n  panpotChange(channel, panpot) {\n    if (this.table) {\n      this.table.querySelector(`tbody > tr:nth-child(${channel + 1}) > td:nth-child(3)`).textContent = panpot\n    }\n\n    this.channelPanpot[channel] = panpot\n  }\n\n  pitchBend(channel, lowerByte, higherByte) {\n    const bend = (lowerByte & 0x7f) | ((higherByte & 0x7f) << 7)\n    const currentNoteOn = this.currentNoteOn[channel]\n    const calculated = bend - 8192\n\n    if (this.table) {\n      this.table.querySelector(`tbody > tr:nth-child(${channel + 1}) > td:nth-child(4)`).textContent = calculated\n    }\n\n    for (let i = 0; i < currentNoteOn.length; ++i) {\n      currentNoteOn[i].updatePitchBend(calculated)\n    }\n\n    this.channelPitchBend[channel] = bend\n  }\n\n  pitchBendSensitivity(channel, sensitivity) {\n    if (this.table) {\n      this.table.querySelector(`tbody > tr:nth-child(${channel + 1}) > td:nth-child(5)`).textContent = sensitivity\n    }\n\n    this.channelPitchBendSensitivity[channel] = sensitivity\n  }\n\n  allSoundOff(channel) {\n    const currentNoteOn = this.currentNoteOn[channel]\n\n    while (currentNoteOn.length > 0) {\n      this.noteOff(channel, currentNoteOn[0].key, 0)\n    }\n  }\n\n  resetAllControl(channel) {\n    this.pitchBend(channel, 0x00, 0x40) // 8192\n  }\n}\n\nconst ProgramNames = [\n  'Acoustic Piano',\n  'Bright Piano',\n  'Electric Grand Piano',\n  'Honky-tonk Piano',\n  'Electric Piano',\n  'Electric Piano 2',\n  'Harpsichord',\n  'Clavi',\n  'Celesta',\n  'Glockenspiel',\n  'Musical box',\n  'Vibraphone',\n  'Marimba',\n  'Xylophone',\n  'Tubular Bell',\n  'Dulcimer',\n  'Drawbar Organ',\n  'Percussive Organ',\n  'Rock Organ',\n  'Church organ',\n  'Reed organ',\n  'Accordion',\n  'Harmonica',\n  'Tango Accordion',\n  'Acoustic Guitar (nylon)',\n  'Acoustic Guitar (steel)',\n  'Electric Guitar (jazz)',\n  'Electric Guitar (clean)',\n  'Electric Guitar (muted)',\n  'Overdriven Guitar',\n  'Distortion Guitar',\n  'Guitar harmonics',\n  'Acoustic Bass',\n  'Electric Bass (finger)',\n  'Electric Bass (pick)',\n  'Fretless Bass',\n  'Slap Bass 1',\n  'Slap Bass 2',\n  'Synth Bass 1',\n  'Synth Bass 2',\n  'Violin',\n  'Viola',\n  'Cello',\n  'Double bass',\n  'Tremolo Strings',\n  'Pizzicato Strings',\n  'Orchestral Harp',\n  'Timpani',\n  'String Ensemble 1',\n  'String Ensemble 2',\n  'Synth Strings 1',\n  'Synth Strings 2',\n  'Voice Aahs',\n  'Voice Oohs',\n  'Synth Voice',\n  'Orchestra Hit',\n  'Trumpet',\n  'Trombone',\n  'Tuba',\n  'Muted Trumpet',\n  'French horn',\n  'Brass Section',\n  'Synth Brass 1',\n  'Synth Brass 2',\n  'Soprano Sax',\n  'Alto Sax',\n  'Tenor Sax',\n  'Baritone Sax',\n  'Oboe',\n  'English Horn',\n  'Bassoon',\n  'Clarinet',\n  'Piccolo',\n  'Flute',\n  'Recorder',\n  'Pan Flute',\n  'Blown Bottle',\n  'Shakuhachi',\n  'Whistle',\n  'Ocarina',\n  'Lead 1 (square)',\n  'Lead 2 (sawtooth)',\n  'Lead 3 (calliope)',\n  'Lead 4 (chiff)',\n  'Lead 5 (charang)',\n  'Lead 6 (voice)',\n  'Lead 7 (fifths)',\n  'Lead 8 (bass + lead)',\n  'Pad 1 (Fantasia)',\n  'Pad 2 (warm)',\n  'Pad 3 (polysynth)',\n  'Pad 4 (choir)',\n  'Pad 5 (bowed)',\n  'Pad 6 (metallic)',\n  'Pad 7 (halo)',\n  'Pad 8 (sweep)',\n  'FX 1 (rain)',\n  'FX 2 (soundtrack)',\n  'FX 3 (crystal)',\n  'FX 4 (atmosphere)',\n  'FX 5 (brightness)',\n  'FX 6 (goblins)',\n  'FX 7 (echoes)',\n  'FX 8 (sci-fi)',\n  'Sitar',\n  'Banjo',\n  'Shamisen',\n  'Koto',\n  'Kalimba',\n  'Bagpipe',\n  'Fiddle',\n  'Shanai',\n  'Tinkle Bell',\n  'Agogo',\n  'Steel Drums',\n  'Woodblock',\n  'Taiko Drum',\n  'Melodic Tom',\n  'Synth Drum',\n  'Reverse Cymbal',\n  'Guitar Fret Noise',\n  'Breath Noise',\n  'Seashore',\n  'Bird Tweet',\n  'Telephone Ring',\n  'Helicopter',\n  'Applause',\n  'Gunshot'\n]\n\nconst TableHeader = ['Instrument', 'Vol', 'Pan', 'Bend', 'Range']\n\nexport default Synthesizer\n","// import { EventEmitter } from '../events'\nimport Synthesizer from './synth'\nimport {\n  noop\n} from '../utils'\n\nclass SF2Loader {\n  constructor() {\n    // super()\n    // this.RpnMsb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    // this.RpnLsb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    // this.ready = false\n    this.synth = null\n    // this.messageHandler = this.onmessage.bind(this)\n  }\n\n  load(url) {\n    return new Promise(resolve => {\n      const xhr = new XMLHttpRequest()\n\n      xhr.open('GET', url, true)\n      xhr.responseType = 'arraybuffer'\n\n      xhr.addEventListener('load', () => {\n        this.onload(xhr.response)\n        resolve(this.synth)\n      })\n\n      xhr.send()\n    })\n  }\n\n  onload(response) {\n    const input = new Uint8Array(response)\n\n    this.loadSoundFont(input)\n  }\n\n  loadSoundFont(input) {\n    if (!this.synth) {\n      this.synth = new Synthesizer(input)\n      document.body.appendChild(this.synth.drawSynth())\n      this.synth.init()\n      this.synth.start()\n      // window.addEventListener('message', this.messageHandler, false)\n    } else {\n      this.synth.refreshInstruments(input)\n    }\n\n    // const win = window.opener ? window.opener : window.parent\n    // win.postMessage('link,ready', '*')\n    // this.emit('load')\n  }\n}\n\nexport default SF2Loader\n","import Synthesizer from './synth'\nimport SynthesizerNote from './note'\nimport Parser from './sf2-parser'\nimport Loader from './sf2-loader'\n// import WebMidiLink from './wml'\n\nexport default {\n  Synthesizer,\n  SynthesizerNote,\n  Parser,\n  Loader\n  // WebMidiLink\n}\n","import SMF from './player'\nimport SoundFont from './synth'\n\nexport default {\n  SMF,\n  SoundFont\n}\n"],"names":["Event","subtype","deltaTime","time","ChannelEvent","channel","parameter1","parameter2","SystemExclusiveEvent","data","MetaEvent","hrtime","window","performance","now","Date","getTime","range","val","min","max","extend","target","objs","i","length","obj","key","stringToArray","str","arr","Array","charCodeAt","readString","input","offset","codes","subarray","String","fromCharCode","readUint32","be","readInt16","Parser","params","ip","index","header","dataInformation","tracks","parseHeader","parseDataInformation","parseTracks","signature","Error","fileLength","trackOffset","dataMajorType","dataMinorType","numberOfTracks","type","size","limit","track","push","message","status","subType","voice","noteLength","extendStatus","velocity","octaveShift","value","toString","NaN","Math","pow","parseEditInstrument","parseVibrato","parseDeviceSpecific","result","info","part","modulator","carrier","octaveSelect","plainTracks","mfiTracks","channelTime","mfiTrack","tmpTrack","pos","j","mfiEvent","id","prevEvent","instrument","sort","a","b","tmp","applyOctaveShift","deltaTimeToByteArray","concat","tempo","timeBase","count","point","split","map","depth","volume","valance","toSMF","table","undefined","TimeDivision","copy","unshift","trackData","jl","trackHeader","Uint8Array","array","Chunk","padding","bigEndian","chunkList","parseChunk","chunk","SMFParser","chunkIndex","riffParser","Riff","formatType","timeDivision","parse","parseHeaderChunk","parseTrackChunk","getChunk","eventQueue","plainQueue","totalTime","prevEventType","prevChannel","readNumber","eventType","event","Midi","log","plainBytes","EventEmitter","_events","handler","indexOf","splice","me","once","e","off","_emit","realEvent","Connectable","inputs","outputs","_inputEvents","_outputEvents","on","ready","Promise","onready","resolve","dest","emit","src","from","to","DEFAULT_TEMPO","SMFPlayer","resume","pause","position","timer","sequence","enableCC111Loop","enableFalcomLoop","enableMFiLoop","enableLoop","tempoRate","masterVolume","sequenceName","copyright","stop","initSequence","then","sendInitMessage","playSequence","hex","floor","substr","mergedTrack","mark","setTimeout","update","player","procTime","match","buffer","parser","init","mergeMidiTracks","Mld","loadMidiFile","convertToMidiTracks","midi","trackPosition","prototype","call","amountToFreq","SynthesizerNote","ctx","destination","sample","playbackRate","basePlaybackRate","sampleRate","panpot","pitchBend","pitchBendSensitivity","modEnvToPitch","startTime","currentTime","computedPlaybackRate","audioBuffer","bufferSource","panner","gainOutput","volAttack","modAttack","volDecay","modDecay","loopStart","loopEnd","start","end","createBuffer","channelData","getChannelData","set","createBufferSource","loop","updatePitchBend","createPanner","output","createGainNode","outputGain","gain","filter","createBiquadFilter","panningModel","setPosition","sin","PI","cos","setValueAtTime","linearRampToValueAtTime","volSustain","baseFreq","initialFilterFc","peekFreq","modEnvToFilterFc","sustainFreq","modSustain","frequency","minValue","maxValue","connect","volEndTime","volRelease","modEndTime","modRelease","cancelScheduledValues","disconnect","computed","peekPitch","scaleTuning","endPitch","schedulePlaybackRate","parserOption","presetHeader","presetZone","presetZoneModulator","presetZoneGenerator","instrumentZone","instrumentZoneModulator","instrumentZoneGenerator","sampleHeader","parseRiffChunk","getNumberOfChunks","parseInfoList","parseSdtaList","parsePdtaList","samplingData","parsePhdr","parsePbag","parsePmod","parsePgen","parseInst","parseIbag","parseImod","parseIgen","parseShdr","apply","parseModulator","parseGenerator","samples","sampleName","startLoop","endLoop","originalPitch","pitchCorrection","sampleLink","sampleType","Int16Array","adjust","adjustSampleData","multiply","newSample","code","GeneratorEnumeratorTable","zone","bagIndex","instrumentBagIndex","bagIndexEnd","zoneInfo","instrumentGenerator","createInstrumentGenerator","instrumentModulator","createInstrumentModulator","generator","generatorInfo","modulatorInfo","instrumentName","preset","presetBagIndex","presetGenerator","createPresetGenerator","presetModulator","createPresetModulator","amount","presetName","modgen","createBagModGen","instrumentGeneratorIndex","modgenInfo","presetModulatorIndex","instrumentModulatorIndex","presetGeneratorIndex","indexStart","indexEnd","zoneModGen","unknown","Synthesizer","bank","bankSet","bufferSize","RpnMsb","RpnLsb","getAudioContext","gainMaster","compressor","createDynamicsCompressor","bufSrc","channelInstrument","channelVolume","channelPanpot","channelPitchBend","channelPitchBendSensitivity","currentNoteOn","baseVolume","onmessage","bind","processMidiMessage","parseInt","command","shift","error","noteOff","noteOn","volumeChange","panpotChange","allSoundOff","resetAllControl","programChange","setMasterVolume","AudioContext","webkitAudioContext","mozAudioContext","createGain","createAllInstruments","presets","createPreset","instruments","createInstrument","banks","presetNumber","name","replace","createNoteInfo","keyRange","sampleID","getModGenAmount","tune","scale","freqVibLFO","lo","hi","sampleId","enumeratorType","defaults","document","createElement","head","body","appendChild","createTableLine","TableHeader","tableLine","select","option","ProgramNames","textContent","querySelector","addEventListener","selectedIndex","notes","querySelectorAll","preventDefault","drag","parentNode","removeChild","isTitleLine","tr","isArray","n","cell","classList","add","warn","instrumentKey","note","remove","lowerByte","higherByte","bend","calculated","sensitivity","SF2Loader","synth","url","xhr","XMLHttpRequest","open","responseType","onload","response","send","loadSoundFont","drawSynth","refreshInstruments"],"mappings":"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"}